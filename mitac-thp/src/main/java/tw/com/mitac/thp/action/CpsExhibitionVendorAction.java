package tw.com.mitac.thp.action;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Set;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;

import tw.com.mitac.hibernate.DeleteStatement;
import tw.com.mitac.hibernate.QueryGroup;
import tw.com.mitac.hibernate.QueryRule;
import tw.com.mitac.thp.bean.CpsExhibitionVendor;
import tw.com.mitac.thp.bean.CpsExhibitionVendorItem;
import tw.com.mitac.thp.util.FileUtil;

// Generated Sat Jun 04 14:36:49 CST 2016 by GenCode.java

/**
 * CpsExhibitionVendorAction generated by GenCode.java
 */
public class CpsExhibitionVendorAction extends DetailController<CpsExhibitionVendor> {
	@Override
	public String[] getImgCols() {
		return new String[] { "exhibitionVendorImg", "exhibitionVendorBanner" };
	}

	@Override
	public LinkedHashMap<String, DetailInfo> getDetailInfoMap() {
		LinkedHashMap<String, DetailInfo> detailClassMap = super.getDetailInfoMap();
		detailClassMap.put("", new DetailInfo("", DETAIL_SET, "detail", CpsExhibitionVendorItem.class));

		return detailClassMap;
	}

	private static final String PATH = ResourceBundle.getBundle("FilePathSetting").getString("cpsExhibitionVendor_doc");

	private static final String PATH2 = ResourceBundle.getBundle("FilePathSetting").getString(
			"cpsExhibitionVendor_pic2");

	// 文件檔案上傳
	protected List<File> doc;
	protected List<String> docFileName;

	public List<File> getDoc() {
		return doc;
	}

	public void setDoc(List<File> doc) {
		this.doc = doc;
	}

	public List<String> getDocFileName() {
		return docFileName;
	}

	public void setDocFileName(List<String> docFileName) {
		this.docFileName = docFileName;
	}

	// DM BSimg
	protected List<File> img1;
	protected List<String> img1FileName;

	public List<File> getImg1() {
		return img1;
	}

	public void setImg1(List<File> img1) {
		this.img1 = img1;
	}

	public List<String> getImg1FileName() {
		return img1FileName;
	}

	public void setImg1FileName(List<String> img1FileName) {
		this.img1FileName = img1FileName;
	}

	// protected List<File> img2;
	// protected List<String> img2FileName;
	//
	// public List<File> getImg2() {
	// return img2;
	// }
	//
	// public void setImg2(List<File> img2) {
	// this.img2 = img2;
	// }
	//
	// public List<String> getImg2FileName() {
	// return img2FileName;
	// }
	//
	// public void setImg2FileName(List<String> img2FileName) {
	// this.img2FileName = img2FileName;
	// }

	protected String text1;
	protected String text2;

	public String getText1() {
		return text1;
	}

	public void setText1(String text1) {
		this.text1 = text1;
	}

	public String getText2() {
		return text2;
	}

	public void setText2(String text2) {
		this.text2 = text2;
	}

	@Override
	protected boolean executeSave() {

		// .doc檔案刪除部分--start
		if (!SUCCESS.equals(uploadData(doc, docFileName, "exhibitionVendorFile")))
			return false;

		String deleteFileName = request.getParameter("deleteFileName");
		if (StringUtils.isNotBlank(deleteFileName)) {
			String deleteFilePath = PATH + bean.getSysid() + "/" + deleteFileName;
			logger.debug("測試 刪除檔案的路徑:" + deleteFilePath);
			File deleteLocation = new File(deleteFilePath);
			deleteLocation.delete();

		}
		// .doc檔案刪除部分--end

		// 大小圖上傳部分--start
		Set dataSet = findDetailSetWhenEdit(DETAIL_SET);

		// 上傳
		// if (img1 != null && img1.size() > 0 || img2 != null && img2.size() >
		// 0) {
		if (img1 != null && img1.size() > 0) {

			String subMainFilePath1 = PATH2 + bean.getSysid() + File.separator;

			File dirFile1 = new File(subMainFilePath1);

			// 如果我這個資料夾沒有就創建
			if (!dirFile1.exists())
				dirFile1.mkdirs();// create document

			for (String fileName1 : img1FileName)
				// 驗證圖片附檔名
				if (!FileUtil.validateExtention(resultFileExtention, fileName1)) {
					addActionError(getText("errMsg.fileFormatWrong", new String[] { FileUtil.getExtention(fileName1) }));
					return false;
				}

			// String subMainFilePath2 = PATH2 + bean.getSysid() +
			// File.separator;
			// File dirFile2 = new File(subMainFilePath2);
			// // 如果我這個資料夾沒有就創建
			// if (!dirFile2.exists())
			// dirFile2.mkdirs();// create document
			//
			// for (String fileName2 : img2FileName)
			// // 驗證圖片附檔名
			// if (!FileUtil.validateExtention(resultFileExtention, fileName2))
			// {
			// addActionError(getText("errMsg.fileFormatWrong", new String[] {
			// FileUtil.getExtention(fileName2) }));
			// return EDIT_ERROR;
			// }

			for (int fileIndex1 = 0; fileIndex1 < img1FileName.size(); fileIndex1++) {

				String finalFileName1 = img1FileName.get(fileIndex1);
				String saveFilePath1 = subMainFilePath1 + finalFileName1;
				logger.debug("測試 儲存路徑:" + saveFilePath1);
				File fileLocation1 = new File(saveFilePath1);

				// 判斷檔案存不存在
				if (fileLocation1.exists()) {
					// 如果存在的話應該使用不同名稱

					// 前面+日期
					finalFileName1 = reportName + finalFileName1;
					saveFilePath1 = subMainFilePath1 + finalFileName1;
					logger.debug("測試 儲存路徑:" + saveFilePath1);
					fileLocation1 = new File(saveFilePath1);

				}

				FileUtil.moveFile(img1.get(fileIndex1), fileLocation1);

				CpsExhibitionVendorItem f = getDefaultDMO(CpsExhibitionVendorItem.class);
				f.setParentSysid(bean.getSysid());
				f.setExhibitionVendorBimg(finalFileName1);

				// 去掉附檔名
				String ext = FileUtil.getExtention(finalFileName1);
				String linktxt = finalFileName1.replace(ext, "");
				f.setVendorDmSummary(text2);
				f.setVendorDmName(text1);
				defaultValue(f);
				tw.com.mitac.thp.util.Util.defaultPK(f);
				dataSet.add(f);
				f.setDataOrder(dataSet.size());

				// 原歷史版本製作，上傳大圖AND小圖
				// for (int fileIndex2 = 0; fileIndex2 < img2FileName.size();
				// fileIndex2++) {
				//
				// String finalFileName2 = img2FileName.get(fileIndex2);
				// String saveFilePath2 = subMainFilePath2 + finalFileName2;
				// logger.debug("測試 儲存路徑:" + saveFilePath2);
				// File fileLocation2 = new File(saveFilePath2);
				//
				// // 判斷檔案存不存在
				// if (fileLocation2.exists()) {
				// // 如果存在的話應該使用不同名稱
				//
				// // 前面+日期
				// finalFileName2 = reportName + finalFileName2;
				// saveFilePath2 = subMainFilePath2 + finalFileName2;
				// logger.debug("測試 儲存路徑:" + saveFilePath2);
				// fileLocation2 = new File(saveFilePath2);
				//
				// }
				//
				// Util.moveFile(img1.get(fileIndex1), fileLocation1);
				// Util.moveFile(img1.get(fileIndex2), fileLocation2);
				//
				// CpsExhibitionVendorItem f =
				// getDefaultDMO(CpsExhibitionVendorItem.class);
				// f.setParentSysid(bean.getSysid());
				// f.setExhibitionVendorBimg(finalFileName1);
				// f.setExhibitionVendorSimg(finalFileName2);
				//
				// // 去掉附檔名
				// String ext = FileUtil.getExtention(finalFileName1);
				// String linktxt = finalFileName1.replace(ext, "");
				// f.setVendorDmSummary(text2);
				// f.setVendorDmName(text1);
				// defaultValue(f);
				// tw.com.mitac.thp.util.Util.defaultPK(f);
				// dataSet.add(f);
				// f.setDataOrder(dataSet.size());
				// }

			}

		}// 大小圖上傳部分--end

		return super.executeSave();

	}

	// .doc上傳檔案
	public String uploadData(List<File> data, List<String> dataFileName, String name) {
		if (data != null && data.size() > 0) {
			String subMainFilePath = PATH + bean.getSysid() + File.separator;
			File dirFile = new File(subMainFilePath);
			if (!dirFile.exists())
				dirFile.mkdirs();// create document

			for (int fileIndex = 0; fileIndex < dataFileName.size(); fileIndex++) {
				String finalFileName = dataFileName.get(fileIndex);
				String saveFilePath = subMainFilePath + finalFileName;
				logger.debug("簡報檔儲存路徑:" + saveFilePath);
				File fileLocation = new File(saveFilePath);
				FileUtil.moveFile(data.get(fileIndex), fileLocation);
				if (fileIndex == 0 /*
									 * && StringUtils.isBlank(bean.
									 * getVendorImageSummary())
									 */) {
					// bean.setVendorImageSummary(finalFileName);
					try {
						PropertyUtils.setProperty(bean, name, finalFileName);
					} catch (IllegalAccessException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (NoSuchMethodException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
		return SUCCESS;
	}

	public String picDelete() {
		String msg = SUCCESS;

		String deletesysid1 = request.getParameter("sysid");
		String deletename1 = request.getParameter("name");
		// String deletename2 = request.getParameter("name2");
		String deleteddsysid1 = request.getParameter("dsysid");
		logger.debug(deletesysid1);
		// 刪除
		if (StringUtils.isNotBlank(deletesysid1)) {
			String deleteFilePath1 = PATH2 + deleteddsysid1 + "/" + deletename1;
			// String deleteFilePath2 = PATH2 + deleteddsysid1 + "/" +
			// deletename2;
			logger.debug("測試 刪除檔案的路徑:" + deleteFilePath1);
			File deleteLocation1 = new File(deleteFilePath1);
			// File deleteLocation2 = new File(deleteFilePath2);

			List<Object> deleteDetailList = new ArrayList<Object>();
			deleteDetailList.add(new DeleteStatement(CpsExhibitionVendorItem.class.getSimpleName(), new QueryGroup(
					new QueryRule(PK, EQ, deletesysid1))));
			msg = cloudDao.save(sf(), deleteDetailList.toArray(), false, null);

			deleteLocation1.delete();
			// deleteLocation2.delete();

			Set<CpsExhibitionVendorItem> dataSet = (Set<CpsExhibitionVendorItem>) findDetailSetWhenEdit(DETAIL_SET);
			CpsExhibitionVendorItem z = null;
			for (CpsExhibitionVendorItem object : dataSet) {
				logger.debug(object.getSysid());
				if (object.getSysid().equals(deletesysid1)) {
					z = object;
					break;
				}
			}
			if (z != null) {
				boolean aa = dataSet.remove(z);

				logger.debug(aa);

			}
		}
		resultString = msg;
		return JSON_RESULT;
	}
}