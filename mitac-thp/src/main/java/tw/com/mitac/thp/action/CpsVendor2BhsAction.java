package tw.com.mitac.thp.action;

import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.Set;

import org.apache.commons.beanutils.ConstructorUtils;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;

import tw.com.mitac.hibernate.DeleteStatement;
import tw.com.mitac.hibernate.QueryGroup;
import tw.com.mitac.hibernate.QueryOrder;
import tw.com.mitac.hibernate.QueryRule;
import tw.com.mitac.miaa.bean.Miaa04Role;
import tw.com.mitac.miaa.bean.Miaa08RoleUid;
import tw.com.mitac.thp.bean.BhsVendorProfile;
import tw.com.mitac.thp.bean.CpsEntity;
import tw.com.mitac.thp.bean.CpsMember;
import tw.com.mitac.thp.bean.CpsMemberForVendor;
import tw.com.mitac.thp.bean.CpsVendor;
import tw.com.mitac.thp.util.Util;

/**
 * CpsVendor2BhsAction generated by GenCode.java
 */
public class CpsVendor2BhsAction extends CpsVendorAction {

	/**
	 * 框架儲存按鈕功能
	 */
	public boolean getWithoutSaveBtn() {
		return false;
	}

	public boolean getWithoutSaveAndNew() {
		return false;
	}

	public boolean getWithoutSaveAndReturnMain() {
		return true;
	}

	/**
	 * 新增帳號功能-資源
	 */
	protected String uuid;
	protected String password;
	protected String accountName;
	protected String email;
	protected String genderForMember;
	protected Boolean isEnabledForMember;
	protected String phone;
	protected String mobilePhone;

	public String getUuid() {
		return uuid;
	}

	public void setUuid(String uuid) {
		this.uuid = uuid;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getAccountName() {
		return accountName;
	}

	public void setAccountName(String accountName) {
		this.accountName = accountName;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getGenderForMember() {
		return genderForMember;
	}

	public void setGenderForMember(String genderForMember) {
		this.genderForMember = genderForMember;
	}

	public Boolean getIsEnabledForMember() {
		return isEnabledForMember;
	}

	public void setIsEnabledForMember(Boolean isEnabledForMember) {
		this.isEnabledForMember = isEnabledForMember;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getMobilePhone() {
		return mobilePhone;
	}

	public void setMobilePhone(String mobilePhone) {
		this.mobilePhone = mobilePhone;
	}

	/**
	 * 修改密碼功能-資源
	 */
	protected String passwordChange;
	protected String passwordChangeSysid;

	public String getPasswordChange() {
		return passwordChange;
	}

	public void setPasswordChange(String passwordChange) {
		this.passwordChange = passwordChange;
	}

	public String getPasswordChangeSysid() {
		return passwordChangeSysid;
	}

	public void setPasswordChangeSysid(String passwordChangeSysid) {
		this.passwordChangeSysid = passwordChangeSysid;
	}

	/**
	 * 自我推薦一句話-資源
	 */
	// protected String vendorHighlightKey;
	//
	// public String getVendorHighlightKey() {
	// return vendorHighlightKey;
	// }
	//
	// public void setVendorHighlightKey(String vendorHighlightKey) {
	// this.vendorHighlightKey = vendorHighlightKey;
	// }

	/** 取得生技館內BhsVendorProfil有資料的帳號，權限顯示時會用到 */
	protected String getVendorInBhs() {
		List<String> list = (List<String>) cloudDao.findProperty(sf(), BhsVendorProfile.class,
				new QueryGroup(new QueryRule[0]), new QueryOrder[0], false, "vendorSysid");
		String str = "*";
		for (String s : list)
			str += "," + s;
		return str;
	}

	/**
	 * Main顯示-權限
	 */
	@Override
	protected QueryGroup getQueryRestrict() {
		if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			return new QueryGroup(new QueryRule(PK, IN, getVendorInBhs()));
		} else if (CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			return new QueryGroup(new QueryRule(PK, "x"));
		} else {
			return new QueryGroup(new QueryRule(PK, "x"));
		}
	}

	/**
	 * 儲存功能進行各處理
	 */

	@Override
	protected boolean executeSave() {

		String msg = SUCCESS;

		// 檢查是否建立廠商資訊
		checkVendorProfileIn();

		// 新增帳號功能
		msg = checkCpsMemberIn();

		if (!SUCCESS.equals(msg)) {
			addActionError(msg);
			return false;
		}

		// 即時客服權限確認處理
		msg = checkIsEnabledConversations();

		if (!SUCCESS.equals(msg)) {
			addActionError(msg);
			return false;
		}

		// 視訊會議權限確認處理
		msg = checkIsEnabledVideoConferencing();

		if (!SUCCESS.equals(msg)) {
			addActionError(msg);
			return false;
		}
		// 檢查是否修改密碼-是就修改
		msg = checkIsPasswordChange();

		if (!SUCCESS.equals(msg)) {
			addActionError(msg);
			return false;
		}

		checkVendorHighlightKey();

		return super.executeSave();
	}

	/**
	 * 檢查是否建立廠商資訊
	 */
	protected String checkVendorProfileIn() {

		// 建立廠商資料
		List<BhsVendorProfile> bhsVendorProfiles = cloudDao.queryTable(sf(), BhsVendorProfile.class,
				new QueryGroup(new QueryRule("vendorSysid", bean.getSysid())), new QueryOrder[0], null, null);
		if (bhsVendorProfiles.size() > 0) {
			// no use
		} else {
			BhsVendorProfile bhsVendorProfile = new BhsVendorProfile();
			Util.defaultPK(bhsVendorProfile);
			bhsVendorProfile.setVendorSysid(bean.getSysid());
			bhsVendorProfile.setVendorName(bean.getName());
			bhsVendorProfile.setVendorImageSummary("");
			bhsVendorProfile.setRemark(uuid);

			defaultValue(bhsVendorProfile);
			saveList.add(bhsVendorProfile);
			logger.debug("bhsVendorProfile:" + bhsVendorProfile.getSysid());
		}

		return SUCCESS;
	}

	/**
	 * Eadit-新增帳號處理
	 */
	protected String checkCpsMemberIn() {

		if (StringUtils.isBlank(uuid) && (StringUtils.isNotBlank(password) || StringUtils.isNotBlank(accountName)
				|| StringUtils.isNotBlank(email))) {
			return "你有意圖新增帳號資料但是您未填寫帳號";
		}

		// 有輸入UUID表示有要新增帳號
		if (StringUtils.isNotBlank(uuid)) {

			// 先進行檢核
			if (StringUtils.isBlank(password))
				return "新增帳號時未輸入密碼資訊，請輸入密碼";

			if (StringUtils.isBlank(accountName))
				return "新增帳號時未輸入名稱資訊，請輸入名稱";

			if (StringUtils.isBlank(email))
				return "新增帳號時未輸入Email資訊，請輸入Email";

			Set<CpsMemberForVendor> dataSet = (Set<CpsMemberForVendor>) findDetailSetWhenEdit(DETAIL_SET);

			// 新增帳號
			CpsMemberForVendor cpsMember = getDefaultDMO(CpsMemberForVendor.class);

			cpsMember.setUuid(uuid);
			cpsMember.setMemberName(accountName);
			cpsMember.setEmail(email);
			cpsMember.setIsEnabled(isEnabledForMember);
			cpsMember.setGender(genderForMember);
			cpsMember.setPhone(phone);
			cpsMember.setMobilePhone(mobilePhone);
			cpsMember.setLanguageType(getCookieLan());
			cpsMember.setPassword(Util.encode(password));
			cpsMember.setSourceType("CpsVendor");
			cpsMember.setRemark(uuid);

			defaultValue(cpsMember);
			tw.com.mitac.thp.util.Util.defaultPK(cpsMember);
			dataSet.add(cpsMember);

			List<String> rl = (List<String>) cloudDao.findProperty(sf(), Miaa04Role.class,
					new QueryGroup(new QueryRule("roleId", "BHSVendor")), null, false, "sysid");
			if (rl.size() == 0) {
				return "未設定BHSVendor(生技館廠商)角色";
			}
			String roleSysid = rl.get(0);

			// 只在新增帳號時新增所屬角色：生技館廠商
			saveList.add(new DeleteStatement(Miaa08RoleUid.class.getSimpleName(),
					new QueryGroup(new QueryRule("uid", uuid), new QueryRule("roleSysid", NE, roleSysid))));
			int count = cloudDao.queryCount(sf(), Miaa08RoleUid.class,
					new QueryGroup(new QueryRule("uid", uuid), new QueryRule("roleSysid", roleSysid)));
			if (count == 0) {
				Miaa08RoleUid roleUid = new Miaa08RoleUid();
				Util.defaultPK(roleUid);
				roleUid.setRoleSysid(roleSysid);
				roleUid.setUid(uuid);
				saveList.add(roleUid);
				logger.debug("New roleUid:" + roleUid.getSysid());
			}

			// 只在新增帳號時新增所屬角色：即時客服
			List<String> rl2 = (List<String>) cloudDao.findProperty(sf(), Miaa04Role.class,
					new QueryGroup(new QueryRule("roleId", "VendorForConversations")), null, false, "sysid");

			if (rl2.size() == 0) {
				return "未設定VendorForConversations(即時客服)角色";
			}

			String roleSysid2 = rl2.get(0);
			if (bean.getIsEnabledConversations()) {
				int count2 = cloudDao.queryCount(sf(), Miaa08RoleUid.class,
						new QueryGroup(new QueryRule("uid", uuid), new QueryRule("roleSysid", roleSysid2)));
				if (count2 == 0) {
					Miaa08RoleUid roleUid = new Miaa08RoleUid();
					Util.defaultPK(roleUid);
					roleUid.setRoleSysid(roleSysid2);
					roleUid.setUid(uuid);
					saveList.add(roleUid);
					logger.debug("New roleUid:" + roleUid.getSysid());
				}
			}

			// 重建DataMap
			resetDataMap(CpsMember.class);
		}
		return SUCCESS;
	}

	/**
	 * Eadit-即時客服權限確認處理
	 */
	protected String checkIsEnabledConversations() {

		List<String> rl = (List<String>) cloudDao.findProperty(sf(), Miaa04Role.class,
				new QueryGroup(new QueryRule("roleId", "VendorForConversations")), null, false, "sysid");
		String roleSysid = "";
		if (rl.size() == 0) {
			return "未設定VendorForConversations(即時客服)角色";
		} else if (rl.size() > 1) {
			return "VendorForConversations(即時客服)角色有重複，請聯繫館主";
		} else {
			roleSysid = rl.get(0);
		}

		// 尋找該團隊登入使用者
		List<CpsMember> memberList = cloudDao.queryTable(sf(), CpsMember.class,
				new QueryGroup(new QueryRule("sourceSysid", bean.getSysid())), new QueryOrder[0], null, null);

		if (memberList.size() > 0) {
			// 客服功能是否使用
			if (bean.getIsEnabledConversations()) {
				for (CpsMember cpsMember : memberList) {
					int count = cloudDao.queryCount(sf(), Miaa08RoleUid.class, new QueryGroup(
							new QueryRule("uid", cpsMember.getUuid()), new QueryRule("roleSysid", roleSysid)));
					if (count == 0) {
						Miaa08RoleUid roleUid = new Miaa08RoleUid();
						Util.defaultPK(roleUid);
						roleUid.setRoleSysid(roleSysid);
						roleUid.setUid(cpsMember.getUuid());
						// 寫入此權限
						saveList.add(roleUid);
						logger.debug("New roleUid:" + roleUid.getSysid());
					}
				}
			} else {
				for (CpsMember cpsMember : memberList) {
					saveList.add(new DeleteStatement(Miaa08RoleUid.class.getSimpleName(), new QueryGroup(
							new QueryRule("uid", cpsMember.getUuid()), new QueryRule("roleSysid", roleSysid))));
				}
			}
		}

		return SUCCESS;
	}

	/**
	 * Eadit-視訊會議權限確認處理
	 */

	protected String checkIsEnabledVideoConferencing() {
		List<String> rl = (List<String>) cloudDao.findProperty(sf(), Miaa04Role.class,
				new QueryGroup(new QueryRule("roleId", "VendorForVideoConferencing")), null, false, "sysid");
		String roleSysid = "";
		if (rl.size() == 0) {
			return "未設定VendorForVideoConferencing(視訊會議)角色";
		} else if (rl.size() > 1) {
			return "VendorForVideoConferencing(視訊會議)角色有重複，請聯繫館主";
		} else {
			roleSysid = rl.get(0);
		}
		
		List<CpsMember> memberList = cloudDao.queryTable(sf(), CpsMember.class,
				new QueryGroup(new QueryRule("sourceSysid", bean.getSysid())), new QueryOrder[0], null, null);

		if (memberList.size() > 0) {
			if (bean.getIsEnabledVideoconferencing()) {
				for (CpsMember cpsMember : memberList) {
					int count = cloudDao.queryCount(sf(), Miaa08RoleUid.class, new QueryGroup(
							new QueryRule("uid", cpsMember.getUuid()), new QueryRule("roleSysid", roleSysid)));
					if (count == 0) {
						Miaa08RoleUid roleUid = new Miaa08RoleUid();
						Util.defaultPK(roleUid);
						roleUid.setRoleSysid(roleSysid);
						roleUid.setUid(cpsMember.getUuid());
						// 寫入此權限
						saveList.add(roleUid);
						logger.debug("New roleUid:" + roleUid.getSysid());
					}
				}
			} else {
				for (CpsMember cpsMember : memberList) {
					saveList.add(new DeleteStatement(Miaa08RoleUid.class.getSimpleName(), new QueryGroup(
							new QueryRule("uid", cpsMember.getUuid()), new QueryRule("roleSysid", roleSysid))));
				}
			}
		}
		return SUCCESS;
	}

	/**
	 * Eadit-修改密碼功能
	 */
	protected String checkIsPasswordChange() {

		if (StringUtils.isNotBlank(passwordChange) && StringUtils.isNotBlank(passwordChangeSysid)
				&& StringUtils.isBlank(uuid)) {

			// 檢核是不是打空白
			if (StringUtils.isBlank(passwordChange)) {
				return "修改密碼未輸入密碼資訊，請輸入密碼";
			}

			Set<CpsMemberForVendor> cpsm = (Set<CpsMemberForVendor>) findDetailSetWhenEdit(DETAIL_SET);

			for (CpsMemberForVendor cpsMemberForVendor : cpsm) {
				// logger.debug(cpsMemberForVendor.getSysid());
				if (cpsMemberForVendor.getSysid().equals(passwordChangeSysid)) {
					cpsMemberForVendor.setPassword(Util.encode(passwordChange));
				}
			}
		}
		return SUCCESS;
	}

	/**
	 * Eadit-自我推薦一句話-準備資源
	 */
	@Override
	public String edit() {
		List<BhsVendorProfile> bhsVendorProfilesList = cloudDao.queryTable(sf(), BhsVendorProfile.class,
				new QueryGroup(new QueryRule("vendorSysid", bean.getSysid())), new QueryOrder[0], null, null);

		if (bhsVendorProfilesList.size() > 0) {
			for (String lan : languageTypeMap.keySet()) {
				List sysMultiLanguageList = cloudDao.queryTable(sf(), multiLanClass(lan),
						new QueryGroup(new QueryRule("sourceTable", "BhsVendorProfile"),
								new QueryRule("sourceColumn", "vendorHighlight"),
								new QueryRule("sourceSysid", bhsVendorProfilesList.get(0).getSysid())),
						new QueryOrder[0], null, null);
				if (sysMultiLanguageList.size() > 0) {
					request.setAttribute("vendorHighlightKey_" + lan, sysMultiLanguageList.get(0));
				}
			}
		}

		String result = super.edit();
		return result;
	}

	/**
	 * Eadit-自我推薦一句話 vender更新 VendorProfile
	 */
	protected String checkVendorHighlightKey() {

		try {
			List<BhsVendorProfile> bhsVendorProfilesList = cloudDao.queryTable(sf(), BhsVendorProfile.class,
					new QueryGroup(new QueryRule("vendorSysid", bean.getSysid())), new QueryOrder[0], null, null);
			if (bhsVendorProfilesList.size() > 0) {
				BhsVendorProfile bhsVendorProfile = bhsVendorProfilesList.get(0);

				logger.debug("語系getCookieLan():" + getCookieLan());

				logger.debug("語系languageTypeMap.keySet():" + languageTypeMap.keySet());
				// 多語系
				for (String lan : languageTypeMap.keySet()) {
					String vendorHighlightKey = request.getParameter("vendorHighlightKey_" + lan);
					if (StringUtils.isNotBlank(vendorHighlightKey)) {
						// 找出語系欄位
						List sysMultiLanguageList = cloudDao.queryTable(sf(), multiLanClass(lan),
								new QueryGroup(new QueryRule("sourceTable", "BhsVendorProfile"),
										new QueryRule("sourceColumn", "vendorHighlight"),
										new QueryRule("sourceSysid", bhsVendorProfile.getSysid())),
								new QueryOrder[0], null, null);
						if (sysMultiLanguageList.size() > 0) {
							Object sysMultiLanguage = sysMultiLanguageList.get(0);
							PropertyUtils.setProperty(sysMultiLanguage, "columnValueString", vendorHighlightKey);
							saveList.add(sysMultiLanguage);
						} else if (sysMultiLanguageList.size() == 0) {

							Object sysMultiLanguage = ConstructorUtils.invokeConstructor(multiLanClass(lan), null);
							// sysMultiLanguageMap.put(sysMultiLanguageKey,
							// sysMultiLanguage);
							Util.defaultPK(sysMultiLanguage);
							PropertyUtils.setProperty(sysMultiLanguage, "sourceSysid", bhsVendorProfile.getSysid());
							PropertyUtils.setProperty(sysMultiLanguage, "sourceTable", "BhsVendorProfile");
							PropertyUtils.setProperty(sysMultiLanguage, "sourceColumn", "vendorHighlight");
							PropertyUtils.setProperty(sysMultiLanguage, "columnDatatype", "STRING");
							PropertyUtils.setProperty(sysMultiLanguage, "columnLength", (long) 255);
							PropertyUtils.setProperty(sysMultiLanguage, "columnValueString", vendorHighlightKey);
							saveList.add(sysMultiLanguage);
						}
					} else {
						saveList.add(new DeleteStatement(multiLanClassName(lan),
								new QueryGroup(new QueryRule("sourceTable", "BhsVendorProfile"),
										new QueryRule("sourceSysid", bhsVendorProfile.getSysid()),
										new QueryRule("sourceColumn", "vendorHighlight"))));

					}

				}
				resetDataMap(BhsVendorProfile.class); // 重新刷新

			}
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return SUCCESS;
	}
}