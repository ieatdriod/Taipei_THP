package tw.com.mitac.thp.action;

import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;

import tw.com.mitac.hibernate.DeleteStatement;
import tw.com.mitac.hibernate.QueryGroup;
import tw.com.mitac.hibernate.QueryRule;

// Generated Mon Sep 26 16:33:41 CST 2016 by GenCode.java

import tw.com.mitac.thp.bean.CpsHottopic;
import tw.com.mitac.thp.bean.CpsHottopicAds;
import tw.com.mitac.thp.bean.MtsAdsC;
import tw.com.mitac.thp.util.FileUtil;

/**
 * CpsHottopicAction generated by GenCode.java
 */
public class CpsHottopicAction extends DetailController<CpsHottopic> {

	/**
	 * 尾檔設定
	 */
	@Override
	public LinkedHashMap<String, DetailInfo> getDetailInfoMap() {
		LinkedHashMap<String, DetailInfo> detailClassMap = super.getDetailInfoMap();
		detailClassMap.put("", new DetailInfo("", DETAIL_SET, "detail", CpsHottopicAds.class));
		return detailClassMap;
	}

	/**
	 * 框架圖片設定
	 */
	@Override
	public String[] getImgCols() {
		return new String[] { "hottopicImg1F", "hottopicImg1B", "hottopicImg2F", "hottopicImg2B", "hottopicImg3F",
				"hottopicImg3B", "hottopicImg4F", "hottopicImg4B" };
	}

	/**
	 * 廣告圖設定-準備資源
	 */

	protected Boolean checkTw;
	protected Boolean checkCn;
	protected Boolean checkUs;
	protected String bannerType;
	protected List<File> bannerImg;
	protected List<String> bannerImgFileName;
	private static final String PATH = ResourceBundle.getBundle("FilePathSetting").getString("cpsHottopicAds_pic");

	public Boolean getCheckTw() {
		return checkTw;
	}

	public void setCheckTw(Boolean checkTw) {
		this.checkTw = checkTw;
	}

	public Boolean getCheckCn() {
		return checkCn;
	}

	public void setCheckCn(Boolean checkCn) {
		this.checkCn = checkCn;
	}

	public Boolean getCheckUs() {
		return checkUs;
	}

	public void setCheckUs(Boolean checkUs) {
		this.checkUs = checkUs;
	}

	public String getBannerType() {
		return bannerType;
	}

	public void setBannerType(String bannerType) {
		this.bannerType = bannerType;
	}

	public List<File> getBannerImg() {
		return bannerImg;
	}

	public void setBannerImg(List<File> bannerImg) {
		this.bannerImg = bannerImg;
	}

	public List<String> getBannerImgFileName() {
		return bannerImgFileName;
	}

	public void setBannerImgFileName(List<String> bannerImgFileName) {
		this.bannerImgFileName = bannerImgFileName;
	}

	protected String getSavePath() {
		return PATH;
	}

	@Override
	protected boolean executeSave() {

		/**
		 * 判斷只要有影片連結 影片標題 影片摘要 其一另外兩個就要有
		 */
		if (StringUtils.isNotBlank(bean.getHottopicVideoUrl())
				|| StringUtils.isNotBlank(bean.getHottopicVideoSummary())
				|| StringUtils.isNotBlank(bean.getHottopicVideoTitle())) {

			if (StringUtils.isBlank(bean.getHottopicVideoUrl())) {
				addActionError("請輸入連結網址");
				return false;
			}

			if (StringUtils.isBlank(bean.getHottopicVideoSummary())) {
				addActionError("請輸入影片摘要");
				return false;
			}

			if (StringUtils.isBlank(bean.getHottopicVideoTitle())) {
				addActionError("請輸入影片標題");
				return false;
			}

		}

		/**
		 * 尾檔圖片上傳
		 */

		Set dataSet = findDetailSetWhenEdit(DETAIL_SET);
		if (bannerImg != null && bannerImg.size() > 0) {
			String subMainFilePath = PATH + bean.getSysid() + File.separator;
			File dirFile = new File(subMainFilePath);
			// 如果我這個資料夾沒有就創建
			if (!dirFile.exists())
				dirFile.mkdirs();// create document
			for (String fileName : bannerImgFileName)
				// 驗證圖片附檔名
				if (!FileUtil.validateExtention(resultFileExtention, fileName)) {
					addActionError(getText("errMsg.fileFormatWrong", new String[] { FileUtil.getExtention(fileName) }));
					return false;
				}

			for (int fileIndex = 0; fileIndex < bannerImgFileName.size(); fileIndex++) {
				String finalFileName = bannerImgFileName.get(fileIndex);
				String saveFilePath = subMainFilePath + finalFileName;
				logger.debug("測試 儲存路徑:" + saveFilePath);
				File fileLocation = new File(saveFilePath);

				// 判斷檔案存不存在
				if (fileLocation.exists()) {
					// 如果存在的話應該使用不同名稱
					// 前面+日期
					finalFileName = reportName + finalFileName;
					saveFilePath = subMainFilePath + finalFileName;
					logger.debug("測試 儲存路徑:" + saveFilePath);
					fileLocation = new File(saveFilePath);
				}

				FileUtil.moveFile(bannerImg.get(fileIndex), fileLocation);

				// 寫入資源
				CpsHottopicAds f2 = getDefaultDMO(CpsHottopicAds.class);
				f2.setParentSysid(bean.getSysid());
				f2.setAdsCn(checkCn);
				f2.setAdsTw(checkTw);
				f2.setAdsUs(checkUs);
				f2.setDataOrder(1);
				f2.setAdsImage(finalFileName);
				f2.setIsEnabled(true);
				f2.setAdsDisplaySource(bannerType);

				// 去掉附檔名
				String ext = FileUtil.getExtention(finalFileName);
				String linktxt = finalFileName.replace(ext, "");
				defaultValue(f2);
				tw.com.mitac.thp.util.Util.defaultPK(f2);
				// 儲存
				dataSet.add(f2);

			}
		}
		remapDataOrder(DETAIL_SET);

		return super.executeSave();
	}

	/**
	 * 刪除尾檔廣告圖片
	 */
	public String bannerDelete() {
		String msg = SUCCESS;
		String deletesysid = request.getParameter("sysid");
		String deletename = request.getParameter("bannerName");
		String deleteddsysid = request.getParameter("dsysid");

		if (StringUtils.isNotBlank(deletesysid)) {
			String deleteFilePath = PATH + deleteddsysid + "/" + deletename;
			logger.debug("刪除檔案資料 deletesysid = " + deletesysid);
			logger.debug("刪除檔案資料 deletename = " + deletename);
			logger.debug("刪除檔案資料 deleteddsysid = " + deleteddsysid);
			logger.debug("測試 刪除檔案的路徑:" + deleteFilePath);
			File deleteLocation = new File(deleteFilePath);

			List<Object> deleteDetailList = new ArrayList<Object>();
			deleteDetailList.add(new DeleteStatement(CpsHottopicAds.class.getSimpleName(), new QueryGroup(
					new QueryRule(PK, EQ, deletesysid))));
			msg = cloudDao.save(sf(), deleteDetailList.toArray(), false, null);

			deleteLocation.delete();

			logger.debug("測式是否進入刪除檔案資料迴圈前");

			Set<CpsHottopicAds> dataSet = (Set<CpsHottopicAds>) findDetailSetWhenEdit(DETAIL_SET);
			logger.debug("刪除檔案資料 dataSet =" + dataSet);
			if (dataSet != null) {
				logger.debug("刪除檔案資料 dataSet2.size() =" + dataSet.size());
			}
			CpsHottopicAds b = null;
			for (CpsHottopicAds object : dataSet) {
				logger.debug(object.getSysid());
				logger.debug("測式是否進入刪除檔案資料迴圈");
				if (object.getSysid().equals(deletesysid)) {
					b = object;
					break;
				}
			}
			if (b != null) {
				boolean aa = dataSet.remove(b);

				logger.debug(aa);
			}
			remapDataOrder(DETAIL_SET);
			super.save();
		}
		resultString = msg;
		return JSON_RESULT;
	}

}