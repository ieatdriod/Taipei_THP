package tw.com.mitac.thp.action;

// Generated Mon May 30 17:50:03 CST 2016 by GenCode.java

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.transform.Transformers;

import tw.com.mitac.hibernate.QueryGroup;
import tw.com.mitac.hibernate.QueryOrder;
import tw.com.mitac.thp.bean.CpsEntity;
import tw.com.mitac.thp.bean.CpsFavouriteList;
import tw.com.mitac.thp.bean.CpsSiteMember;
import tw.com.mitac.thp.bean.CpsVendor;

/**
 * CpsSiteMember2Action generated by GenCode.java
 */
public abstract class CpsSiteMember2BasisAction<MO> extends BasisCrudAction<MO> {
	private static final long serialVersionUID = 1L;

	// public boolean getWithoutClickBtnEdit() {
	// return true;
	// }

	@Override
	public String main() {
		String result = super.main();
		if (getQueryCondition() == null) {
			beaninfo = new HashMap<String, String>();
			beaninfo.put("fa", "T");
			find();
		}
		return result;
	}

	protected String getEntityType() {
		return "MTS";
	}

	@Override
	protected Object[] jqgridList(Class<?> clazz, QueryGroup queryGroup, QueryOrder[] orders, Integer from,
			Integer length) {
		String favouriteType = "";
		String sourceSysid = "";
		if (getQueryBeaninfo() != null && StringUtils.isNotBlank(getQueryBeaninfo().get("fa"))) {

			String entityType = "";
			String vendorSysid = "";

			// 假如是館主
			if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {
				// 預設是可以看到全部資料
				// return QueryGroup.DEFAULT;
				// 不同角色只能看本身的資料
				// 根據entityType去搜尋有MTS/BHS的資料
				entityType = getEntityType();
			} else if (CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {
				// 假如是供應商
				// 根據廠商vendorSysid 去決定顯示的資料
				vendorSysid = getUserAccount().getSourceSysid();
			} else {
				// 都不是就全部不顯示
				return new Object[] { 0, new ArrayList() };
			}

			favouriteType = getQueryBeaninfo().get("fa");
			switch (favouriteType) {
			case "T":
				sourceSysid = getQueryBeaninfo().get("faselect1");
				break;
			case "S":
				sourceSysid = getQueryBeaninfo().get("faselect2");
				break;
			case "I":
				sourceSysid = getQueryBeaninfo().get("faselect3");
				break;
			case "H":
				sourceSysid = getQueryBeaninfo().get("faselect4");
				break;
			
			}
			logger.debug("favouriteType:" + favouriteType + " faselect:" + sourceSysid);

			String fromSql = " from " + CpsSiteMember.class.getSimpleName() + " s, "
					+ CpsFavouriteList.class.getSimpleName() + " f ";
			String whereHql = " where s.sysid = f.memberSysid ";
			whereHql += " and f.favouriteType = :favouriteType ";
			if (StringUtils.isNotBlank(sourceSysid))
				whereHql += " and f.sourceSysid = :sourceSysid ";
			if (StringUtils.isNotBlank(entityType))
				whereHql += " and f.entityType = :entityType ";
			if (StringUtils.isNotBlank(vendorSysid))
				whereHql += " and f.vendorSysid = :vendorSysid ";

			String hql2 = " select count(distinct s.sysid) ";
			hql2 += fromSql;
			hql2 += whereHql;

			// String hql = " select distinct s.* ";
			// String hql = " select distinct s ";

			String selectStr = " select distinct ";

			List<Field> f = tw.com.mitac.ssh.util.Util.declaredFields(clazz);
			for (Field field : f)
				selectStr += "s." + field.getName() + " AS " + field.getName() + ",";
			selectStr = selectStr.substring(0, selectStr.length() - 1);
			String hql = selectStr;
			// logger.debug("selectStr:" + selectStr);
			hql += fromSql;
			hql += whereHql;
			if (orders != null && orders.length > 0) {
				hql += " order by ";
				for (QueryOrder queryOrder : orders) {
					hql += " s." + queryOrder.getFieldName() + " " + queryOrder.getOrderOp();
				}
			}

			Session s = sf().openSession();

			Query q2 = s.createQuery(hql2);
			q2.setString("favouriteType", favouriteType);
			if (StringUtils.isNotBlank(sourceSysid))
				q2.setString("sourceSysid", sourceSysid);
			if (StringUtils.isNotBlank(entityType))
				q2.setString("entityType", entityType);
			if (StringUtils.isNotBlank(vendorSysid))
				q2.setString("vendorSysid", vendorSysid);
			Integer record = ((Number) q2.uniqueResult()).intValue();

			Query q = s.createQuery(hql);
			q.setString("favouriteType", favouriteType);
			if (StringUtils.isNotBlank(sourceSysid))
				q.setString("sourceSysid", sourceSysid);
			if (StringUtils.isNotBlank(entityType))
				q.setString("entityType", entityType);
			if (StringUtils.isNotBlank(vendorSysid))
				q.setString("vendorSysid", vendorSysid);

			if (from != null)
				q.setFirstResult(from);
			if (length != null)
				q.setMaxResults(length);

			q.setResultTransformer(Transformers.aliasToBean(getPersistentClass()));
			List results = q.list();

			s.close();

			// Integer record = cloudDao.queryTableCount(sf(), clazz,
			// queryGroup);
			if (getIsDataChangeLocale())
				addMultiLan(results, sf(), getPersistentClass());

			return new Object[] { record, results };

		}
		return super.jqgridList(clazz, queryGroup, orders, from, length);
	}
}