package tw.com.mitac.thp.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.apache.commons.lang3.StringUtils;

import tw.com.mitac.hibernate.QueryGroup;
import tw.com.mitac.hibernate.QueryOrder;
import tw.com.mitac.hibernate.QueryRule;
import tw.com.mitac.thp.bean.BhsArticle;
import tw.com.mitac.thp.bean.CpsEntity;
import tw.com.mitac.thp.bean.CpsExhibitionList;

// Generated Fri Jun 24 10:49:43 CST 2016 by GenCode.java

import tw.com.mitac.thp.bean.CpsRegistration;
import tw.com.mitac.thp.bean.MtsArticle;

/**
 * CpsRegistrationAction generated by GenCode.java
 */
public class CpsRegistrationAction extends BasisCrudAction<CpsRegistration> {

	/**
	 * 篩選功能
	 */

	protected String faselect1;
	protected String faselect2;
	protected String faselect3;

	public String getFaselect1() {
		return faselect1;
	}

	public void setFaselect1(String faselect1) {
		this.faselect1 = faselect1;
	}

	public String getFaselect2() {
		return faselect2;
	}

	public void setFaselect2(String faselect2) {
		this.faselect2 = faselect2;
	}

	public String getFaselect3() {
		return faselect3;
	}

	public void setFaselect3(String faselect3) {
		this.faselect3 = faselect3;
	}

	@Override
	protected QueryGroup createQueryCondition() {

		List<QueryRule> rules = new ArrayList<QueryRule>();
		if (StringUtils.isNotBlank(beaninfo.get("article"))) {
			rules.add(new QueryRule("sourceSysid", EQ, beaninfo.get("article")));
		}
		return new QueryGroup(rules.toArray(new QueryRule[0]));

	}

	/**
	 * Main頁面查詢功能(預設)-報名表查詢(下拉式選單)
	 */
	@Override
	public String main() {

		Map<String, String> articleMap = new LinkedHashMap<>();

		if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			// 判斷哪位館主
			CpsEntity entity = getDataCpsEntityETable().get(getUserAccount().getSourceSysid());

			// 下拉選單資源
			if (entity.getDataId().equals("mts")) {
				List<MtsArticle> mtsArticleList = cloudDao.queryTable(sf(), MtsArticle.class,
						new QueryGroup(new QueryRule("articleCategory", "F")),
						new QueryOrder[] { new QueryOrder("mtsArticleType"), new QueryOrder(DATA_ORDER) }, null, null);
				addMultiLan(mtsArticleList, sf(), MtsArticle.class);
				if (mtsArticleList.size() > 0) {
					for (MtsArticle mtsArticle : mtsArticleList) {
						// String mtsArticleSysid = mtsArticle.getSysid();
						// String mtsArticleTitle =
						// mtsArticle.getArticleTitle();
						articleMap.put(mtsArticle.getSysid(), mtsArticle.getArticleTitle());

					}
				}
			} else if (entity.getDataId().equals("bhs")) {
				List<BhsArticle> bhsArticleList = cloudDao.queryTable(sf(), BhsArticle.class,
						new QueryGroup(new QueryRule("articleCategory", "F")),
						new QueryOrder[] { new QueryOrder("bhsArticleType"), new QueryOrder(DATA_ORDER) }, null, null);
				addMultiLan(bhsArticleList, sf(), BhsArticle.class);
				if (bhsArticleList.size() > 0) {
					for (BhsArticle bhsArticle : bhsArticleList) {
						articleMap.put(bhsArticle.getSysid(), bhsArticle.getArticleTitle());
					}

				}
			}else if (entity.getDataId().equals("cps")) {
				List<MtsArticle> mtsArticleList = cloudDao.queryTable(sf(), MtsArticle.class,
						new QueryGroup(new QueryRule("articleCategory", "F")),
						new QueryOrder[] { new QueryOrder("mtsArticleType"), new QueryOrder(DATA_ORDER) }, null, null);
				addMultiLan(mtsArticleList, sf(), MtsArticle.class);
				if (mtsArticleList.size() > 0) {
					for (MtsArticle mtsArticle : mtsArticleList) {
						articleMap.put(mtsArticle.getSysid(), mtsArticle.getArticleTitle());

					}
				}
				
				List<BhsArticle> bhsArticleList = cloudDao.queryTable(sf(), BhsArticle.class,
						new QueryGroup(new QueryRule("articleCategory", "F")),
						new QueryOrder[] { new QueryOrder("bhsArticleType"), new QueryOrder(DATA_ORDER) }, null, null);
				addMultiLan(bhsArticleList, sf(), BhsArticle.class);
				if (bhsArticleList.size() > 0) {
					for (BhsArticle bhsArticle : bhsArticleList) {
						articleMap.put(bhsArticle.getSysid(), bhsArticle.getArticleTitle());
					}

				}
				
				
				
			}

			request.setAttribute("articleMap", articleMap);
		}
		String result = super.main();

		// 預設篩選
		if (getQueryCondition() == null && articleMap != null) {
			for (String article : articleMap.keySet()) {
				// String i = articleMap.get(article);
				beaninfo = new HashMap<String, String>();
				logger.debug("article:" + article);
				logger.debug("beaninfo:" + beaninfo);
				beaninfo.put("article", article);

				find();
				break;
			}
		}
		return result;
	}

	// @Override
	// public String main() {
	// String result = super.main();
	// if (getQueryCondition() == null) {
	// beaninfo = new HashMap<String, String>();
	//
	// find();
	// }
	// return result;
	// }

	/**
	 * 處理Eadit上方顯示資訊
	 */

	@Override
	public String edit() {
		String result = super.edit();

		if (bean.getCreator() != null) {

			if (bean.getRegistrationType().equals("E")) {
				logger.debug("近來E");

				CpsExhibitionList source = createDataTable(CpsExhibitionList.class).get(bean.getSourceSysid());
				beaninfo.put("aaa", source.getExhibitionName());
				logger.debug("aaa的值:" + source.getExhibitionName());
			} else if (bean.getRegistrationType().equals("F")) {
				logger.debug("近來F");

				CpsEntity entity = getDataCpsEntityETable().get(bean.getEntitySysid());
				if (entity.getDataId().equals("mts")) {

					MtsArticle source = createDataTable(MtsArticle.class).get(bean.getSourceSysid());
					beaninfo.put("aaa", source.getForumName());
					logger.debug("aaa的值:" + source.getForumName());
				} else if (entity.getDataId().equals("bhs")) {

					BhsArticle source = createDataTable(BhsArticle.class).get(bean.getSourceSysid());
					beaninfo.put("aaa", source.getForumName());
					logger.debug("aaa的值:" + source.getForumName());
				}

			}

		}

		return result;
	}

	/**
	 * 處理報名表預設顯示
	 */
	@Override
	protected QueryGroup getQueryRestrict() {
		// 判斷是否館主級
		if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			// 判斷哪位館主
			CpsEntity entity = getDataCpsEntityETable().get(getUserAccount().getSourceSysid());

			if (entity.getDataId().equals("mts")) {
				return new QueryGroup(new QueryRule("entitySysid", entity.getSysid()));

			} else if (entity.getDataId().equals("bhs")) {
				return new QueryGroup(new QueryRule("entitySysid", entity.getSysid()));

			} else if (entity.getDataId().equals("cps")) {
				return QueryGroup.DEFAULT;
			} else {
				return new QueryGroup(new QueryRule(PK, "x"));
			}
		} else {
			return new QueryGroup(new QueryRule(PK, "x"));
		}
	}

	@Override
	protected Object[] jqgridList(Class<?> clazz, QueryGroup queryGroup, QueryOrder[] orders, Integer from,
			Integer length) {
		Object[] oldArr = super.jqgridList(clazz, queryGroup, orders, from, length);
		List<CpsRegistration> list = (List<CpsRegistration>) oldArr[1];

		for (CpsRegistration bean : list) {
			if (bean.getRegistrationType().equals("E")) {
				CpsExhibitionList source = createDataTable(CpsExhibitionList.class).get(bean.getSourceSysid());
				bean.setSourceSysid(source.getExhibitionName());

			} else if (bean.getRegistrationType().equals("F")) {

				CpsEntity entity = getDataCpsEntityETable().get(bean.getEntitySysid());

				if (entity.getDataId().equals("mts")) {
					MtsArticle source = createDataTable(MtsArticle.class).get(bean.getSourceSysid());

					bean.setSourceSysid(source.getArticleTitle());

				} else if (entity.getDataId().equals("bhs")) {
					BhsArticle source = createDataTable(BhsArticle.class).get(bean.getSourceSysid());
					bean.setSourceSysid(source.getArticleTitle());
				}
			}

		}
		Object[] newArr = new Object[] { oldArr[0], list };
		return newArr;
	}

}