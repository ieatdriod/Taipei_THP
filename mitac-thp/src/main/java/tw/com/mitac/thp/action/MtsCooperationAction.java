package tw.com.mitac.thp.action;

import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Set;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper;
import org.json.JSONObject;

import tw.com.mitac.hibernate.DeleteStatement;
// Generated Sat May 14 10:58:38 CST 2016 by GenCode.javaimport tw.com.mitac.hibernate.DeleteStatement;
import tw.com.mitac.hibernate.QueryGroup;
import tw.com.mitac.hibernate.QueryRule;
import tw.com.mitac.thp.bean.CpsEntity;
import tw.com.mitac.thp.bean.CpsMember;
import tw.com.mitac.thp.bean.CpsVendor;
import tw.com.mitac.thp.bean.MtsAdsC;
import tw.com.mitac.thp.bean.MtsCooperation;
import tw.com.mitac.thp.bean.MtsInfoLink;
import tw.com.mitac.thp.bean.MtsMenuLink;
import tw.com.mitac.thp.bean.MtsRecommandItem;
import tw.com.mitac.thp.util.FileUtil;

/**
 * MtsCooperationAction generated by GenCode.java
 */
public class MtsCooperationAction extends DetailController<MtsCooperation> {
	@Override
	public String[] getImgCols() {
		return new String[] { "cooperationSummaryImg" };
	}

	@Override
	public LinkedHashMap<String, DetailInfo> getDetailInfoMap() {
		LinkedHashMap<String, DetailInfo> detailClassMap = super.getDetailInfoMap();
		detailClassMap.put("", new DetailInfo("", DETAIL_SET, "detail", MtsInfoLink.class));
		detailClassMap.put("2", new DetailInfo("2", DETAIL_SET2, "detail2", MtsAdsC.class));

		return detailClassMap;
	}

	private static final String PATH = ResourceBundle.getBundle("FilePathSetting").getString("mtsCooperation_pic");

	protected List<File> img1;
	protected List<String> img1FileName;

	public List<File> getImg1() {
		return img1;
	}

	public void setImg1(List<File> img1) {
		this.img1 = img1;
	}

	public List<String> getImg1FileName() {
		return img1FileName;
	}

	public void setImg1FileName(List<String> img1FileName) {
		this.img1FileName = img1FileName;
	}

	@Override
	protected boolean executeSave() {

		// 20160715修正模仿BhsMenu版本-start
		String msg = saveMtsMenuSel();
		if (!SUCCESS.equals(msg)) {
			addActionError(msg);
			return false;
		}
		// 20160715修正模仿BhsMenu版本-end

		Set dataSet = findDetailSetWhenEdit(DETAIL_SET);

		// 上傳
		if (img1 != null && img1.size() > 0) {
			String subMainFilePath = PATH + bean.getSysid() + File.separator;
			File dirFile = new File(subMainFilePath);
			// 如果我這個資料夾沒有就創建
			if (!dirFile.exists())
				dirFile.mkdirs();// create document

			if (img1FileName == null) {
				logger.warn("img1FileName:" + img1FileName);
				logger.warn("img1:" + img1);
				addActionError("why??");
				return false;
			}

			for (String fileName : img1FileName)
				// 驗證圖片附檔名
				if (!FileUtil.validateExtention(resultFileExtention, fileName)) {
					addActionError(getText("errMsg.fileFormatWrong", new String[] { FileUtil.getExtention(fileName) }));
					return false;
				}

			for (int fileIndex = 0; fileIndex < img1FileName.size(); fileIndex++) {

				String finalFileName = img1FileName.get(fileIndex);
				String saveFilePath = subMainFilePath + finalFileName;
				logger.debug("測試 儲存路徑:" + saveFilePath);
				File fileLocation = new File(saveFilePath);

				// 判斷檔案存不存在
				if (fileLocation.exists()) {
					// 如果存在的話應該使用不同名稱

					// 前面+日期
					finalFileName = reportName + finalFileName;
					saveFilePath = subMainFilePath + finalFileName;
					logger.debug("測試 儲存路徑:" + saveFilePath);
					fileLocation = new File(saveFilePath);

				}

				FileUtil.moveFile(img1.get(fileIndex), fileLocation);

				MtsInfoLink f = getDefaultDMO(MtsInfoLink.class);
				f.setParentSysid(bean.getSysid());
				f.setFileName(finalFileName);

				// 去掉附檔名
				String ext = FileUtil.getExtention(finalFileName);
				String linktxt = finalFileName.replace(ext, "");
				f.setLinktxt(linktxt);

				defaultValue(f);
				tw.com.mitac.thp.util.Util.defaultPK(f);
				dataSet.add(f);

			}
		}

		// MtsAdsC-SaveActionStart
		boolean isBannerSuccess = bannerImgExecute(PATH, getDetailInfoMap().get("2"));
		if (!isBannerSuccess)
			return false;
		// MtsAdsC-SaveActionEnd

		return super.executeSave();
	}

	@Override
	public String delete() {
		String deletePk = bean.getSysid();
		if (StringUtils.isNotBlank(deletePk)) {
			int c = cloudDao.queryTableCount(sf(), MtsRecommandItem.class, new QueryGroup(new QueryRule("sourceSysid",
					deletePk)));
			if (c > 0) {
				addActionError(getText("delete.error.recommand"));
				return EDIT_ERROR;
			}
			saveList.add(new DeleteStatement(MtsMenuLink.class.getSimpleName(), new QueryGroup(new QueryRule(FK,
					deletePk))));
		}
		return super.delete();
	}

	public String picDelete() {
		String msg = SUCCESS;

		JSONObject jo = new JSONObject();
		String deletesysid = request.getParameter("sysid");
		String deletename = request.getParameter("name");
		String deleteddsysid = request.getParameter("dsysid");
		logger.debug(deletesysid);
		// 刪除
		if (StringUtils.isNotBlank(deletesysid)) {
			String deleteFilePath = PATH + deleteddsysid + "/" + deletename;
			logger.debug("測試 刪除檔案的路徑:" + deleteFilePath);
			File deleteLocation = new File(deleteFilePath);

			List<Object> deleteDetailList = new ArrayList<Object>();
			deleteDetailList.add(new DeleteStatement(MtsInfoLink.class.getSimpleName(), new QueryGroup(new QueryRule(
					PK, EQ, deletesysid))));
			msg = cloudDao.save(sf(), deleteDetailList.toArray(), false, null);

			deleteLocation.delete();

			Set<MtsInfoLink> dataSet = (Set<MtsInfoLink>) findDetailSetWhenEdit(DETAIL_SET);
			MtsInfoLink z = null;
			for (MtsInfoLink object : dataSet) {
				logger.debug(object.getSysid());
				if (object.getSysid().equals(deletesysid)) {
					z = object;
					break;
				}
			}
			if (z != null) {
				boolean aa = dataSet.remove(z);

				logger.debug(aa);

			}
		}
		resultString = msg;
		return JSON_RESULT;

	}

	protected String uploadData(String name) {
		if (MultiPartRequestWrapper.class.isInstance(request)) {
			MultiPartRequestWrapper multipartRequest = (MultiPartRequestWrapper) request;
			String[] dataFileName = multipartRequest.getFileNames(name + "Stream");
			File[] data = multipartRequest.getFiles(name + "Stream");
			if (data != null && data.length > 0) {
				String subMainFilePath = PATH + bean.getSysid() + File.separator;
				File dirFile = new File(subMainFilePath);
				if (!dirFile.exists())
					dirFile.mkdirs();// create document
				for (String fileName : dataFileName)
					if (!FileUtil.validateExtention(pictureExtention, fileName)) {
						addActionError(getText("errMsg.fileFormatWrong",
								new String[] { FileUtil.getExtention(fileName) }));
						return EDIT_ERROR;
					}
				for (int fileIndex = 0; fileIndex < dataFileName.length; fileIndex++) {
					String finalFileName = dataFileName[fileIndex];
					String saveFilePath = subMainFilePath + finalFileName;
					logger.debug("測試 itemPicture儲存路徑:" + saveFilePath);
					File fileLocation = new File(saveFilePath);
					FileUtil.moveFile(data[fileIndex], fileLocation);
					if (fileIndex == 0) {
						try {
							PropertyUtils.setProperty(bean, name, finalFileName);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
		return SUCCESS;
	}

	@Override
	public String edit() {
		// 預設值
		if (StringUtils.isBlank(bean.getVendorSysid())) {
			CpsMember user = getUserAccount();
			if (CpsVendor.class.getSimpleName().equals(user.getSourceType())) {
				bean.setVendorSysid(user.getSourceSysid());
			}
		}
		String result = super.edit();

		// 20160715修正模仿BhsMenu版本-start
		menuSel = getMtsMenuSel();
		// 20160715修正模仿BhsMenu版本-end
		return result;
	}

	@Override
	protected QueryGroup getQueryRestrict() {
		if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			return QueryGroup.DEFAULT;
		} else if (CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			return new QueryGroup(new QueryRule("vendorSysid", getUserAccount().getSourceSysid()));
		} else {
			return new QueryGroup(new QueryRule(PK, "x"));
		}
	}

	// MtsAdsC-bannerDeleteStart
	public final String bannerDelete() {
		return bannerDelete(PATH);
	}
	// MtsAdsC-bannerDeleteEnd
}