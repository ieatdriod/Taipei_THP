package tw.com.mitac.thp.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.struts2.ServletActionContext;

import tw.com.mitac.hibernate.QueryGroup;
import tw.com.mitac.hibernate.QueryOrder;
import tw.com.mitac.hibernate.QueryRule;
import tw.com.mitac.thp.bean.CpsVendor;
import tw.com.mitac.thp.bean.HpsVendorItem;

// Generated Tue Apr 12 20:43:55 CST 2016 by GenCode.java

/**
 * HpsVendorItemSpecificationAction generated by GenCode.java
 */
@SuppressWarnings("unchecked")
public class HpsVendorItemUpdateAction extends BasisLoginAction {
	@Override
	protected String getMiaaInitUrl() {
		return "crud/HpsVendorItemUpdateAction";
	}

	private static final String MAIN = "main";
	private static String mainFilePath = ServletActionContext.getServletContext().getRealPath("/download") + "/";
	protected List<Object> saveList = new ArrayList<Object>();

	protected List<File> xls;
	protected List<String> xlsFileName;

	public List<File> getXls() {
		return xls;
	}

	public void setXls(List<File> xls) {
		this.xls = xls;
	}

	public List<String> getXlsFileName() {
		return xlsFileName;
	}

	public void setXlsFileName(List<String> xlsFileName) {
		this.xlsFileName = xlsFileName;
	}

	public String main() {
		addActionMessage("此功能僅供廠商使用");
		return MAIN;
	}

	public String dataInput() {
		if (!CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			addActionError("此功能僅供廠商使用");
			return MAIN;
		}
		String sourceSysid = getUserAccount().getSourceSysid();
		// sourceSysid = "CpsVendor20151210165106498784000"; // 測試用

		try {
			FileInputStream is = new FileInputStream(xls.get(0));// fileName2
			XSSFWorkbook workbook = new XSSFWorkbook(is);
			XSSFSheet sheet = workbook.getSheetAt(0);
			XSSFRow row;
			/* 第一列為title 所以i從1開始略過0 */
			for (int i = 1; i < sheet.getPhysicalNumberOfRows(); i++) {
				row = sheet.getRow(i); // 取得第 i Row
				XSSFCell cell2 = row.getCell(2);
				XSSFCell cell4 = row.getCell(4);
				if (cell2 != null && cell4 != null) {
					String itemID = cell2.toString().trim();
					String iQuantity = cell4.toString().trim();
					List<HpsVendorItem> hpsVendorItemList = (List<HpsVendorItem>) cloudDao.query(sf(),
							HpsVendorItem.class, new QueryGroup(new QueryRule("vendorSysid", sourceSysid),
									new QueryRule("dataId", itemID)), new QueryOrder[0], null, null);
					if (hpsVendorItemList.size() == 1) {
						HpsVendorItem hpsVendorItem = hpsVendorItemList.get(0);
						// 處理由cell讀入時格式問題（去逗號,去小數點以後）
						iQuantity = iQuantity.replace(",", "");
						int dotIdx = iQuantity.indexOf(".");
						if (dotIdx != -1)
							iQuantity = iQuantity.substring(0, dotIdx).replace(".", "");
						Long oldIQ = hpsVendorItem.getInvendtoryQuantity();
						Long newIQ = Long.parseLong(iQuantity);
						if (oldIQ.compareTo(newIQ) != 0) { // 若不同則更新
							hpsVendorItem.setInvendtoryQuantity(newIQ);
							saveList.add(hpsVendorItem);
						}
					} else {
						addActionError("錯誤，查無商品代號：" + itemID);
						return MAIN;
					}
				}
			}

			if (saveList.size() > 0) {
				String daoMsg = "";
				if (StringUtils.isBlank(daoMsg)) {
					daoMsg = cloudDao.save(sf(), saveList.toArray(), false, "UPDATE");
				}
				if (!daoMsg.equals(SUCCESS)) {
					addActionError(daoMsg);
					return MAIN;
				}
			}
		} catch (Exception e) {
			addActionError(e.getMessage());
			return MAIN;
		}
		addActionMessage("成功更新" + saveList.size() + "筆庫存資料");
		return MAIN;
	}

	protected Class<?> getCrudJqgridClass() {
		return HpsVendorItem.class;
	}

	public String dataOutput() {
		if (!CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			addActionError("此功能僅供廠商使用");
			return MAIN;
		}
		String sourceSysid = getUserAccount().getSourceSysid();
		// sourceSysid = "CpsVendor20151210165106498784000"; // 測試用

		List<Map<String, Object>> typeSysidList = (List<Map<String, Object>>) cloudDao.findProperty(sf(),
				HpsVendorItem.class, new QueryGroup(new QueryRule("vendorSysid", sourceSysid)), new QueryOrder[0],
				false, "dataId", "name", "invendtoryQuantity");
		CpsVendor cv = cloudDao.get(sf(), CpsVendor.class, sourceSysid);

		String fileLocation = mainFilePath;
		String fileName = "VendorItem.xlsx"; // PREFIX->"VendorItem"
		String fileName2 = fileLocation + fileName;
		File dstFile = new File(fileLocation);
		if (!dstFile.exists()) {
			dstFile.mkdirs();// 建立資料夾
		}
		dstFile = new File(fileName2);
		dstFile.delete();

		// XSSFWbook=>XSSFSheet=>XSSFRow=>XSSFCell
		XSSFWorkbook wwb = new XSSFWorkbook(); // 建立Excel物件

		XSSFFont font = wwb.createFont();
		font.setColor(HSSFColor.BLACK.index); // 顏色
		font.setBoldweight(Font.BOLDWEIGHT_NORMAL); // 粗細體
		font.setFontHeightInPoints((short) 12);// 字體大小
		font.setFontName("TIMES");

		// 設定儲存格格式
		XSSFCellStyle cellFormat10 = wwb.createCellStyle();
		{
			cellFormat10.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);// 填滿顏色
			cellFormat10.setFillPattern(CellStyle.SOLID_FOREGROUND);
			cellFormat10.setFont(font); // 設定字體
			cellFormat10.setAlignment(CellStyle.ALIGN_CENTER); // 水平置中
			cellFormat10.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER); // 垂直置中
			// 設定框線
			cellFormat10.setBorderBottom((short) 1);
			cellFormat10.setBorderTop((short) 1);
			cellFormat10.setBorderLeft((short) 1);
			cellFormat10.setBorderRight((short) 1);
			cellFormat10.setWrapText(true); // 自動換行
		}
		XSSFCellStyle cellFormat11 = wwb.createCellStyle();
		{
			cellFormat11.setFillForegroundColor(HSSFColor.WHITE.index);// 填滿顏色
			cellFormat11.setFillPattern(CellStyle.SOLID_FOREGROUND);
			cellFormat11.setFont(font); // 設定字體
			cellFormat11.setAlignment(CellStyle.ALIGN_CENTER); // 水平置中
			cellFormat11.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER); // 垂直置中
			// 設定框線
			cellFormat11.setBorderBottom((short) 1);
			cellFormat11.setBorderTop((short) 1);
			cellFormat11.setBorderLeft((short) 1);
			cellFormat11.setBorderRight((short) 1);
			cellFormat11.setWrapText(true); // 自動換行
		}

		// 創建一個可寫入的工作表
		XSSFSheet ws = wwb.createSheet("庫存管理");

		int rowIdx = 0;
		XSSFRow rowTitle = ws.createRow(rowIdx);
		String[] titles = { "廠商代號", "廠商名稱", "商品代號", "商品名稱", "庫存數量" };
		for (int i = 0; i < 5; i++) {
			XSSFCell cellTitle = rowTitle.createCell(i);
			cellTitle.setCellValue(titles[i]);
			cellTitle.setCellStyle(cellFormat10);
		}
		rowIdx++;

		for (Map<String, Object> map : typeSysidList) {
			XSSFRow rowContent = ws.createRow(rowIdx);
			int cellIdx = 0;
			String[] keys = { "", "", "dataId", "name", "invendtoryQuantity" };
			for (String s : keys) {
				XSSFCell cellContent = rowContent.createCell(cellIdx);
				if (cellIdx == 0)
					cellContent.setCellValue("");
				if (cellIdx == 1)
					cellContent.setCellValue(cv.getName());
				if (cellIdx > 1)
					cellContent.setCellValue(map.get(s).toString());
				cellContent.setCellStyle(cellFormat11);
				cellIdx++;
			}
			rowIdx++;
		}

		Map<String, XSSFSheet> writableSheetMap = new LinkedHashMap<String, XSSFSheet>();
		writableSheetMap.put("", ws);

		try {
			FileOutputStream fOut = new FileOutputStream(dstFile);
			wwb.write(fOut);
			fOut.close();
			// downFileName = fileName;
			// downInputStream = new FileInputStream(fileName2);
		} catch (Exception e) {
			addActionError(e.getMessage());
			return MAIN;
		}

		request.setAttribute("showExcel", fileName);
		return MAIN;
	}
}