package tw.com.mitac.thp.action;

import java.io.ByteArrayInputStream;
import java.lang.reflect.InvocationTargetException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sf.jasperreports.engine.JRParameter;

import org.apache.commons.lang3.StringUtils;

import tw.com.mitac.email.MailBean;
import tw.com.mitac.email.MailThread;
import tw.com.mitac.hibernate.HqlStatement;
import tw.com.mitac.hibernate.QueryGroup;
import tw.com.mitac.hibernate.QueryOrder;
import tw.com.mitac.hibernate.QueryRule;
import tw.com.mitac.hibernate.UpdateStatement;
import tw.com.mitac.thp.bean.CpsCountry;
import tw.com.mitac.thp.bean.CpsEmailTemplate;
import tw.com.mitac.thp.bean.CpsEntity;
import tw.com.mitac.thp.bean.CpsMember;
import tw.com.mitac.thp.bean.CpsSiteMember;
import tw.com.mitac.thp.bean.CpsVendor;
import tw.com.mitac.thp.bean.MtsAppointment;
import tw.com.mitac.thp.bean.MtsAppointmentCase;
import tw.com.mitac.thp.bean.MtsAppointmentCaseLink;
import tw.com.mitac.thp.bean.MtsAppointmentFeedback;
import tw.com.mitac.thp.bean.MtsAppointmentFileLink;
import tw.com.mitac.thp.bean.MtsDoctor;
import tw.com.mitac.thp.bean.MtsProducts;
import tw.com.mitac.thp.util.FileUtil;
import tw.com.mitac.thp.util.Util;

import com.opensymphony.xwork2.ActionContext;

/**
 * MtsAppointmentAction generated by GenCode.java
 */
public class MtsAppointmentAction extends DetailController<MtsAppointment> {
	/** 框架尾檔處理 */
	@Override
	public LinkedHashMap<String, DetailInfo> getDetailInfoMap() {
		LinkedHashMap<String, DetailInfo> detailClassMap = super.getDetailInfoMap();
		detailClassMap.put("", new DetailInfo("", DETAIL_SET, "detail", MtsAppointmentCaseLink.class));
		detailClassMap.put("2", new DetailInfo("2", DETAIL_SET2, "detail2", MtsAppointmentFileLink.class));
		detailClassMap.put("3", new DetailInfo("3", DETAIL_SET3, "detail3", MtsAppointmentFeedback.class));
		return detailClassMap;
	}

	/** 查詢是否過期72小時沒有處理的預約單 */
	public List<MtsAppointment> getMtsAppointmentTimeOutList() {
		// 今日時間減三天，就是回到過去三天
		Date date = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.DATE, -3);
		Date newDate = calendar.getTime();
		// 設定日期格式
		DateFormat formatDate = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		// 進行轉換
		String formatDateToString = formatDate.format(newDate);

		List<MtsAppointment> mtsAppointmentTimeOutList = null;

		if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {

			mtsAppointmentTimeOutList = cloudDao.queryTable(sf(), MtsAppointment.class,
					new QueryGroup(new QueryRule("appointmentVendor", EQ, "MTS"),
							new QueryRule("appointmentStatus", EQ, "Pending"),
							new QueryRule("creationDate", LE, formatDateToString)),
					new QueryOrder[0], null, null);

		} else if (CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {

			mtsAppointmentTimeOutList = cloudDao.queryTable(sf(), MtsAppointment.class,
					new QueryGroup(new QueryRule("appointmentVendor", EQ, getUserAccount().getSourceSysid()),
							new QueryRule("appointmentStatus", EQ, "Pending"),
							new QueryRule("creationDate", LE, formatDateToString)),
					new QueryOrder[0], null, null);
		}

		return mtsAppointmentTimeOutList;
	}

	/** 處理已讀未讀 */
	public List<MtsAppointment> getMtsAppointmentIsReadList() {

		List<MtsAppointment> mtsAppointmentIsReadList = null;

		if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			mtsAppointmentIsReadList = cloudDao.queryTable(sf(), MtsAppointment.class,
					new QueryGroup(new QueryRule("appointmentVendor", EQ, "MTS"),
							new QueryRule("appointmentStatus", EQ, "Pending"), new QueryRule("isRead", false)),
					new QueryOrder[0], null, null);
		} else if (CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			mtsAppointmentIsReadList = cloudDao.queryTable(sf(), MtsAppointment.class,
					new QueryGroup(new QueryRule("appointmentVendor", EQ, getUserAccount().getSourceSysid()),
							new QueryRule("appointmentStatus", EQ, "Pending"), new QueryRule("isRead", false)),
					new QueryOrder[0], null, null);
		}

		return mtsAppointmentIsReadList;
	}

	/** 掃瞄有關此資料相關的疾病資料 */
	public List<MtsAppointmentCaseLink> getMtsAppointmentCaseLinkList() {
		List<MtsAppointmentCaseLink> mtsAppointmentCaseLink = cloudDao.queryTable(sf(), MtsAppointmentCaseLink.class,
				new QueryGroup(new QueryRule("parentSysid", EQ, bean.getSysid())), new QueryOrder[0], null, null);

		// if (mtsAppointmentCaseLink.size() == 0){
		// MtsAppointmentCaseLink tempBean = new MtsAppointmentCaseLink();
		// mtsAppointmentCaseLink.add(tempBean);
		// }

		return mtsAppointmentCaseLink;
	}

	/** 取得上傳檔案 資訊 */
	public List<MtsAppointmentFileLink> getMtsAppointmentFileLink() {
		List<MtsAppointmentFileLink> MtsAppointmentFileLinkList = cloudDao.queryTable(sf(),
				MtsAppointmentFileLink.class, new QueryGroup(new QueryRule("parentSysid", EQ, bean.getSysid())),
				new QueryOrder[0], null, null);

		return MtsAppointmentFileLinkList;
	}

	// 顯示預約的服務
	public List<MtsProducts> getMtsProductsList() {
		String mtsProductsSysidAll = bean.getMtsProductsSysid();
		String[] mtsProductsSysid = mtsProductsSysidAll.split(",");
		List<MtsProducts> mtsProductsList = cloudDao.queryTable(sf(), MtsProducts.class,
				new QueryGroup(new QueryRule(PK, IN, mtsProductsSysid)), new QueryOrder[0], null, null);
		addMultiLan(mtsProductsList, sf(), MtsProducts.class);
		return mtsProductsList;
	}

	@Override
	public String edit() {
		String result = super.edit();

		/** OtherHelps */
		String otherHelps = StringUtils.defaultString(bean.getOtherHelps());
		int isTn = otherHelps.indexOf("TN");
		if (isTn != -1) {
			String aryOtherHelps[] = otherHelps.split(",");
			String aryTn[] = aryOtherHelps[0].split(":");
			String ls = "";
			if (aryTn.length > 1) {
				ls = aryTn[1];
			}

			request.setAttribute("tnOtherHelps", ls);
		}

		/** 當進入畫面未讀改成已讀 */
		logger.debug("是否已讀" + bean.getIsRead());
		if (bean.getIsRead() == false) {
			Map<String, Object> setMap = getUpdatePropertyMap();
			setMap.put("isRead", true);
			HqlStatement hql = new UpdateStatement(MtsAppointment.class.getSimpleName(),
					new QueryGroup(new QueryRule(PK, bean.getSysid())), setMap);
			cloudDao.save(sf(), hql);
		}

		return result;
	}

	/** 對話區域處理 */
	@Override
	protected Object jqgridDetailEditOrAdd(String resourceName, Class<?> clazz)
			throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {

		Object b = super.jqgridDetailEditOrAdd(resourceName, clazz);

		// 確認轉換型別
		if (b instanceof MtsAppointmentFeedback) {
			// 轉型
			MtsAppointmentFeedback a = (MtsAppointmentFeedback) b;
			// 如果是空值
			if (StringUtils.isBlank(a.getBackMemberSysid()) && StringUtils.isBlank(a.getMemberSysid())) {
				// 將值寫入
				a.setBackMemberSysid(getUserAccount().getSysid());
			}

		}
		return b;
	}

	/** MAIN頁面篩選 */
	@Override
	protected QueryGroup getQueryRestrict() {
		if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			return new QueryGroup(new QueryRule("appointmentVendor", "MTS"));
		} else if (CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			return new QueryGroup(new QueryRule("appointmentVendor", getUserAccount().getSourceSysid()));
		} else {
			return new QueryGroup(new QueryRule(PK, "x"));
		}
	}

	/** 狀態查詢 */
	@Override
	protected QueryGroup createQueryCondition() {
		List<QueryRule> rules = new ArrayList<QueryRule>();

		String selectAP = beaninfo.get("selectAP");

		if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {

			rules.add(new QueryRule("appointmentVendor", EQ, "MTS"));

		} else if (CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {

			rules.add(new QueryRule("appointmentVendor", EQ, getUserAccount().getSourceSysid()));

		}

		if (!selectAP.equals("All")) {
			rules.add(new QueryRule("appointmentStatus", EQ, selectAP));
		}

		return new QueryGroup(rules.toArray(new QueryRule[0]));
	}

	public String getJqgridDefaultSidx() {

		return "appointmentNo";
	}

	public String getJqgridDefaultSord() {

		return "asc";
	}

	/**
	 * [jqgrid] url
	 */
	@Override
	public String jqgridList() {
		String result = super.jqgridList();
		if (!StringUtils.equals("excel", oper)) {
			List<Map> formatToMapResults = (List<Map>) resultMap.get("gridModel");
			jagridDataPlugin(formatToMapResults);
		}
		return result;
	}

	protected void jagridDataPlugin(List<Map> formatToMapResults) {
		for (int i = 0; i < formatToMapResults.size(); i++) {
			Map<String, Object> map = formatToMapResults.get(i);
			Object pkObj = map.get(PK);

			String creationDate = (String) map.get(CD);
			map.put("oldCreationDate", creationDate);
			if (StringUtils.length(creationDate) > 10) {
				creationDate = StringUtils.substring(creationDate, 0, 10);
				map.put(CD, creationDate);
			}

			// redo button
			String url = request.getContextPath() + "/app/collaborationActionEdit?actionKey=" + getActionKey()
					+ "&sysid=" + pkObj;
			String clickBtnEditText = "<a href='" + url + "' target='_self'>"
					+ "<button type='button' class='mi-invisible-btn' style='width:65px;'>"
					+ "<i class='glyphicon glyphicon-edit' style='color:#ff3971;' title='"
					+ getText("jqgrid.clickBtnEdit") + "'/>" + "</button></a>";

			map.put("clickBtnEdit", clickBtnEditText);
		}
	}

	@Override
	public String main() {

		/** 預設顯選擇全部 */
		if (getQueryCondition() == null) {
			beaninfo = new HashMap<String, String>();
			beaninfo.put("selectAP", "All");
			find();
		}
		String result = super.main();
		return result;
	}

	/** PDF */
	public String print() {
		edit();

		Map<String, Object> parameter = new HashMap<String, Object>();
		parameter.put("logo", FileUtil.createInputStream("medical_index_logo.jpg"));

		MtsAppointment mtsAppointmentBean = bean;

		Map<String, Object> mtsAppointmentMap = tw.com.mitac.ssh.util.Util.formatToMap(mtsAppointmentBean);
		logger.debug("mtsAppointmentlistAppointmentVendor():" + mtsAppointmentBean.getAppointmentVendor());

		// 其他需求
		if (StringUtils.isNotBlank(mtsAppointmentBean.getOtherHelps())) {
			String otherHelps = mtsAppointmentBean.getOtherHelps();
			int tn = otherHelps.indexOf("TN");
			if (tn != -1) {
				otherHelps = otherHelps.replace("TN", getText("web.mts.interpreter"));
			}
			int vn = otherHelps.indexOf("VN");
			if (vn != -1) {
				otherHelps = otherHelps.replace("VN", getText("web.mts.visaApplication"));
			}
			int an = otherHelps.indexOf("AN");
			if (an != -1) {
				otherHelps = otherHelps.replace("AN", getText("web.mts.accommodationArrangement"));
			}
			int tr = otherHelps.indexOf("TR");
			if (tr != -1) {
				otherHelps = otherHelps.replace("TR", getText("web.mts.travelArrangement"));
			}
			int ts = otherHelps.indexOf("TS");
			if (ts != -1) {
				otherHelps = otherHelps.replace("TS", getText("web.mts.transportationArrangement"));
			}
			int oe = otherHelps.indexOf("OE");
			if (oe != -1) {
				otherHelps = otherHelps.replace("OE", getText("web.mts.otherServices"));
			}
			mtsAppointmentMap.put("otherHelps", otherHelps);
		}

		// 處理是否來台就醫
		String accept = "";
		boolean isAcceptTaiwan = (boolean) bean.getIsAcceptMedicalAtTaiwan();
		if (isAcceptTaiwan) {
			accept = getText("web.yes");
			String isAcceptTaiwanMechanism = (String) bean.getTreatmentMechanism();
			if (StringUtils.isNotBlank(isAcceptTaiwanMechanism)) {
				accept += "," + isAcceptTaiwanMechanism;
			}
		} else {
			accept = getText("web.no");
		}
		parameter.put("isAcceptTaiwan", accept);

		// 處理名稱
		if ("MTS".equals(mtsAppointmentBean.getAppointmentVendor())) {
			mtsAppointmentMap.put("subVendorName", getText("web.node.mts"));
		} else {
			String rtnVendorName = "";
			CpsVendor cpsVendor = getDataCpsVendorTable().get(mtsAppointmentBean.getAppointmentVendor());
			if (cpsVendor != null) {
				rtnVendorName = StringUtils.defaultString(cpsVendor.getName());
			}
			mtsAppointmentMap.put("subVendorName", rtnVendorName);
		}

		// 拿掉日期後面的毫秒
		String[] dateArr = mtsAppointmentMap.get("creationDate").toString().split(" ");
		String appointmentDate = dateArr[0]; // + " " + dateArr[1];
		mtsAppointmentMap.put("appointmentDate", appointmentDate);

		// 取得醫師名稱
		if (StringUtils.isNotBlank(mtsAppointmentBean.getAppointmentDoctor())) {
			MtsDoctor doctor = getDataMtsDoctorTable().get(mtsAppointmentBean.getAppointmentDoctor());
			mtsAppointmentMap.put("doctorName", doctor.getDoctorName());
		}

		// 取醫療服務名稱
		String productsName = "";
		if (StringUtils.isNotBlank(mtsAppointmentBean.getMtsProductsSysid())) {
			String[] productsNameArr = StringUtils.defaultString(mtsAppointmentBean.getMtsProductsSysid()).split(",");
			for (int i = 0; i < productsNameArr.length; i++) {
				String rtnProductsName = StringUtils
						.defaultString(getDataMtsProductsTable().get(productsNameArr[i].toString()).getName());
				productsName = rtnProductsName + "," + productsName;
				// productsName =
				// findProductsName(productsNameArr[i].toString()) + "</br>"
				// + productsName; //配合jsp改成textarea改回用,連接
			}
		}

		// logger.debug("appointmentSub-productsName-1:" +
		// productsName);
		// logger.debug("appointmentSub-productsName-2:" +
		// StringUtils.substringBeforeLast(productsName , ","));
		mtsAppointmentMap.put("productsName", StringUtils.substringBeforeLast(productsName, ","));

		// 取國別名稱
		String rtnCountryName = "";
		CpsCountry cpsCountry = createDataTable(CpsCountry.class).get(mtsAppointmentBean.getSuffererCountry());
		if (cpsCountry != null) {
			rtnCountryName = StringUtils.defaultString(cpsCountry.getName());
		}
		mtsAppointmentMap.put("countryName", rtnCountryName);

		parameter.put("itemBean", mtsAppointmentMap);

		Set<MtsAppointmentFileLink> detailSet2 = (Set<MtsAppointmentFileLink>) sessionGet(DETAIL_SET2);
		parameter.put("mtsAppointmentFilesList", detailSet2);
		if (detailSet2.size() > 0) {
			parameter.put("item", getText("web.mts.item"));
			parameter.put("fileName", getText("web.mts.fileName"));
			parameter.put("noItem", "");
		} else {
			parameter.put("noItem", getText("web.mts.noItem"));
			parameter.put("item", "");
			parameter.put("fileName", "");
		}

		Set<MtsAppointmentCaseLink> detailSet = (Set<MtsAppointmentCaseLink>) sessionGet(DETAIL_SET);
		List<Map> mtsAppointmentCaseMapList = formatListToMap(detailSet);
		for (Map<String, Object> linkMap : mtsAppointmentCaseMapList) {
			MtsAppointmentCase mtsAppointmentCase = getMtsAppointmentCaseTable()
					.get(linkMap.get("appointmentCaseSysid").toString());
			String caseName = "";
			if (mtsAppointmentCase != null)
				caseName = mtsAppointmentCase.getItemName();
			linkMap.put("caseName", caseName);
		}

		parameter.put(JRParameter.REPORT_LOCALE, ActionContext.getContext().getLocale());

		// ResourceBundle rb = ResourceBundle.getBundle("globalFields",
		// ActionContext.getContext().getLocale());

		byte[] rawData = FileUtil.export(mtsAppointmentCaseMapList, parameter, "map");
		downInputStream = new ByteArrayInputStream(rawData);
		DateFormat df = new SimpleDateFormat("yyyyMMdd");
		downFileName = df.format(systemDate) + "-" + bean.getAppointmentNo() + "-"
				+ getText("web.mts.makeAppointmentOrder") + ".pdf";
		return DOWN_STREAM;
	}

	public String ajaxFeedbackList() {
		List resultList = new ArrayList();

		// sort by feedbackTime
		Set<MtsAppointmentFeedback> detailSet = (Set<MtsAppointmentFeedback>) findDetailSetWhenEdit(DETAIL_SET3);
		logger.debug("detailSet:" + detailSet.size());

		Set<String> backMemberSysidSet = new HashSet<String>(), memberSysidSet = new HashSet<String>();
		for (MtsAppointmentFeedback obj : detailSet) {
			if (StringUtils.isNotBlank(obj.getBackMemberSysid()))
				backMemberSysidSet.add(obj.getBackMemberSysid());
			if (StringUtils.isNotBlank(obj.getMemberSysid()))
				memberSysidSet.add(obj.getMemberSysid());
		}
		Map<String, String> backNmMap = new HashMap<String, String>(), nmMap = new HashMap<String, String>();
		if (backMemberSysidSet.size() > 0) {
			List<Map> memberList = (List<Map>) cloudDao.findProperty(sf(), CpsMember.class,
					new QueryGroup(new QueryRule(PK, IN, backMemberSysidSet)), null, false, PK, "memberName");
			for (Map<String, String> map : memberList) {
				backNmMap.put(map.get(PK), map.get("memberName"));
			}
		}
		if (memberSysidSet.size() > 0) {
			List<Map> memberList = (List<Map>) cloudDao.findProperty(sf(), CpsSiteMember.class,
					new QueryGroup(new QueryRule(PK, IN, memberSysidSet)), null, false, PK, "memberName");
			for (Map<String, String> map : memberList) {
				nmMap.put(map.get(PK), map.get("memberName"));
			}
		}

		DateFormat f = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		for (MtsAppointmentFeedback obj : detailSet) {
			Map<String, Object> resultData = new HashMap<String, Object>();
			resultData.put("feedbackTime", f.format(obj.getFeedbackTime()));
			resultData.put("feedbackDetail", obj.getFeedbackDetail());

			String spokesman = "";
			if (StringUtils.isNotBlank(obj.getBackMemberSysid()))
				spokesman = backNmMap.get(obj.getBackMemberSysid());
			if (StringUtils.isNotBlank(obj.getMemberSysid()))
				spokesman = nmMap.get(obj.getMemberSysid());
			resultData.put("spokesman", spokesman);

			resultList.add(resultData);
		}

		this.resultList = resultList;
		return JSON_RESULT;
	}

	/**
	 * <ol>
	 * <li>存檔</li>
	 * <li>寄信</li>
	 * </ol>
	 */
	public String ajaxFeedbackSave() {
		resultMap = new HashMap();
		resultMap.put("isSuccess", false);
		resultMap.put("msg", "");

		String fk = request.getParameter("sysid");
		String billno = request.getParameter("billno");
		String clientName = request.getParameter("clientName");
		String clientMail = request.getParameter("clientMail");
		String feedbackDetail = request.getParameter("feedbackDetail");
		MtsAppointmentFeedback obj = getDefaultDMO(MtsAppointmentFeedback.class);
		Util.defaultPK(obj);
		defaultValue(obj);
		obj.setParentSysid(fk);
		obj.setFeedbackDetail(feedbackDetail);
		obj.setBackMemberSysid(getUserAccount().getSysid());
		String daoMsg = cloudDao.save(sf(), obj);
		if (StringUtils.equals(SUCCESS, daoMsg)) {
			resultMap.put("isSuccess", true);
			if (StringUtils.isNotBlank(clientMail)) {
				// vendor to client
				// TODO 應建立預約來台就醫範本
				List<CpsEmailTemplate> emailTemplate = cloudDao.queryTable(sf(), CpsEmailTemplate.class,
						new QueryGroup(new QueryRule("emailId", "appointment_V2C")), null, null, null);
				if (emailTemplate.size() == 0) {
					resultMap.put("msg", "查無範本信件可以寄出，請告知管理員沒有範本信件");
				} else {
					CpsEmailTemplate emailClientEmailTemplate = emailTemplate.get(0);
					// 寫入Email資訊
					String emailContent = emailClientEmailTemplate.getEmailContent();
					String emailTitle = emailClientEmailTemplate.getEmailTitle();

					/** 標題部分 */
					// 單號
					emailTitle = emailTitle.replace("$BILLNO$", billno);

					/** 內文部分 */
					// 前台會員名稱
					emailContent = emailContent.replace("$CLIENT_NAME$", clientName);

					// 單號
					emailContent = emailContent.replace("$BILLNO$", billno);

					// 廠商名稱
					emailContent = emailContent.replace("$VENDOR_NAME$", getUserAccount().getMemberName());

					// 回覆內容
					emailContent = emailContent.replace("$FEEDBACK$", feedbackDetail);

					List<String> emailClientList = new ArrayList<String>();
					emailClientList.add(emailContent);

					try {
						new MailThread(new MailBean(clientMail, emailTitle, emailClientList), getSendMailSetting())
								.start();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			} else {
				resultMap.put("msg", "信件沒有寄出");
			}
		} else {
			resultMap.put("msg", daoMsg);
		}
		return JSON_RESULT;
	}

	/**
	 * <ol>
	 * <li>存檔</li>
	 * <li>寄信</li>
	 * </ol>
	 */
	public String ajaxBillStatusSave() {
		resultMap = new HashMap();
		resultMap.put("isSuccess", false);
		resultMap.put("msg", "");

		String pk = request.getParameter("sysid");
		String billno = request.getParameter("billno");
		String clientName = request.getParameter("clientName");
		String clientMail = request.getParameter("clientMail");
		String billStatus = request.getParameter("billStatus");
		String vendorSysid = request.getParameter("vendorSysid");

		Map<String, Object> setMap = getUpdatePropertyMap();
		setMap.put("appointmentStatus", billStatus);
		HqlStatement hql = new UpdateStatement(MtsAppointment.class.getSimpleName(),
				new QueryGroup(new QueryRule(PK, pk)), setMap);
		String daoMsg = cloudDao.save(sf(), hql);
		if (StringUtils.equals(SUCCESS, daoMsg)) {
			resultMap.put("isSuccess", true);
			resultMap.put("msg", "狀態更改成功");

			if (billStatus.equals("Accepted") || billStatus.equals("Declined")) {
				if (StringUtils.isNotBlank(clientMail)) {
					String emailId = "";

					//判斷是哪種回覆
					if (billStatus.equals("Accepted")) {
						emailId = "appointment_Accepted";
					} else if (billStatus.equals("Declined")) {
						emailId = "appointment_Declined";
					}

					// 找認證信範本
					List<CpsEmailTemplate> emailTemplate = (List<CpsEmailTemplate>) cloudDao.queryTable(sf(),
							CpsEmailTemplate.class, new QueryGroup(new QueryRule("emailId", emailId)),
							new QueryOrder[0], null, null);

					if (emailTemplate.size() == 0) {
						resultMap.put("msg", "查無範本信件可以寄出，請告知管理員沒有範本信件");
					} else {

						retext(emailTemplate.get(0), clientMail, billStatus, clientName,
								getDataCpsVendorTable().get(vendorSysid).getName(), billno);
					}

				} else {
					resultMap.put("msg", "信件沒有寄出");
				}
			}

		} else {
			resultMap.put("msg", daoMsg);
		}
		return JSON_RESULT;
	}

	protected final void retext(CpsEmailTemplate emailTemplate, String clientMail, String billStatus, String clientName,
			String vendorName, String billno) {

		/**標題部分*/
		String emailTitle = emailTemplate.getEmailTitle();
		// 預約單號
		emailTitle = emailTitle.replace("$BILLNO$", billno);

		/**內文部分*/
		String emailContent = emailTemplate.getEmailContent();
		// 客戶名稱 
		emailContent = emailContent.replace("$CLIENT_NAME$", clientName);
		// 廠商名稱 
		emailContent = emailContent.replace("$VENDOR_NAME$", vendorName);
		// 預約單號 
		emailContent = emailContent.replace("$BILLNO$", billno);

		List<String> contentStringList = new ArrayList<String>();
		contentStringList.add(emailContent);
		new MailThread(new MailBean(clientMail, emailTitle, contentStringList), getSendMailSetting()).start();
	}

	public String ajaxFileList() {
		List resultList = new ArrayList();

		Set<MtsAppointmentFileLink> detailSet = (Set<MtsAppointmentFileLink>) findDetailSetWhenEdit(DETAIL_SET2);
		logger.debug("detailSet:" + detailSet.size());

		for (MtsAppointmentFileLink obj : detailSet) {
			resultList.add(obj.getFileName());
		}

		this.resultList = resultList;
		return JSON_RESULT;
	}

	/**
	 * 實作特殊排序
	 * <ol>
	 * <li>red</li>
	 * <li>blue</li>
	 * <li>Pending</li>
	 * <li>Processing</li>
	 * <li>Accepted</li>
	 * <li>Declined</li>
	 * </ol>
	 */
	public String jqgridList2() {
		logger.debug("start");
		List<QueryGroup> andQueryGroupsList = new ArrayList<QueryGroup>();
		QueryGroup queryCondition = getQueryCondition();
		if (queryCondition != null)
			andQueryGroupsList.add(queryCondition);
		QueryGroup queryRestrict = getQueryRestrict();
		if (queryRestrict != null)
			andQueryGroupsList.add(queryRestrict);

		QueryGroup q = new QueryGroup(AND, null, andQueryGroupsList.toArray(new QueryGroup[0]));
		QueryOrder[] orderArr = { new QueryOrder("appointmentStatus"),
				new QueryOrder("substring(" + Util.buildJoinTableFrontKey(getPersistentClass()) + "." + CD + ",1,13)",
						DESC),
				new QueryOrder("isRead") };
		Object[] arr = jqgridList(getPersistentClass(), q, orderArr, null, null);
		List results = (List) arr[1];

		List<Map> formatToMapResults = formatListToStaticMap(results);
		jagridDataPlugin(formatToMapResults);

		// resultList = formatToMapResults;

		List resultList = new ArrayList();

		// 今日時間減三天，就是回到過去三天
		Date date = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.DATE, -3);
		Date newDate = calendar.getTime();
		// 設定日期格式
		DateFormat formatDate = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		// 進行轉換
		String formatDateToString = formatDate.format(newDate);

		List<Map> redList = new ArrayList<Map>();
		List<Map> blueList = new ArrayList<Map>();
		List<Map> l1List = new ArrayList<Map>();
		List<Map> l2List = new ArrayList<Map>();
		List<Map> l3List = new ArrayList<Map>();
		List<Map> l4List = new ArrayList<Map>();
		for (int i = 0; i < formatToMapResults.size(); i++) {
			Map<String, Object> map = formatToMapResults.get(i);
			String billStatus = (String) map.get("appointmentStatus");
			if (StringUtils.equals(billStatus, "Pending")) {
				String creationDate = (String) map.get("oldCreationDate");
				Boolean isRead = (Boolean) map.get("isRead");
				if (creationDate.compareTo(formatDateToString) <= 0) {
					redList.add(map);
				} else if (!isRead) {
					blueList.add(map);
				} else {
					l1List.add(// 0,
							map);
				}
			} else if (StringUtils.equals(billStatus, "Processing")) {
				l2List.add(// 0,
						map);
			} else if (StringUtils.equals(billStatus, "Accepted")) {
				l3List.add(// 0,
						map);
			} else if (StringUtils.equals(billStatus, "Declined")) {
				l4List.add(// 0,
						map);
			}
		}
		resultList.addAll(redList);
		resultList.addAll(blueList);
		resultList.addAll(l1List);
		resultList.addAll(l2List);
		resultList.addAll(l3List);
		resultList.addAll(l4List);

		this.resultList = resultList;
		logger.debug("end");
		return JSON_RESULT;
	}
}