package tw.com.mitac.thp.action;

// Generated Fri Mar 11 14:27:13 CST 2016 by GenCode.java

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import tw.com.mitac.hibernate.DeleteStatement;
import tw.com.mitac.hibernate.QueryGroup;
import tw.com.mitac.hibernate.QueryRule;
import tw.com.mitac.thp.bean.BhsRecommandItem;
import tw.com.mitac.thp.util.Util;

/**
 * BhsRecommandAction generated by GenCode.java
 */
public class BhsRecommandBasisAction<MO> extends DetailController<MO> {
	@Override
	protected boolean executeSave() {
		// remap order
		Set<BhsRecommandItem> detailSet = (Set<BhsRecommandItem>) sessionGet(DETAIL_SET);
		if (detailSet != null) {
			List<BhsRecommandItem> list = new ArrayList<BhsRecommandItem>(detailSet);
			Collections.sort(list, new Comparator<BhsRecommandItem>() {
				public int compare(BhsRecommandItem ent1, BhsRecommandItem ent2) {
					return (ent1.getDataOrder().compareTo(ent2.getDataOrder()));
				}
			});
			int order = 1;
			for (BhsRecommandItem detail : list) {
				detail.setDataOrder(order);
				order++;
			}
			detailSet = new LinkedHashSet<BhsRecommandItem>(list);
			sessionSet(DETAIL_SET, detailSet);
		}

		return super.executeSave();
	}

	// 尾檔完成（替代刪除事件
	public String ajaxLoadComplete() {
		String msg = SUCCESS;
		try {
			String parentSysid = request.getParameter("parentSysid");
			if (StringUtils.isBlank(parentSysid)) {
				resultString = "參數錯誤";
				return JSON_RESULT;
			}
			int total = cloudDao.queryCount(sf(), BhsRecommandItem.class,
					new QueryGroup(new QueryRule(FK, parentSysid)));

			// remap order
			Set<BhsRecommandItem> detailSet = (Set<BhsRecommandItem>) sessionGet(DETAIL_SET);
			if (detailSet == null)
				detailSet = new LinkedHashSet<BhsRecommandItem>();
			if (detailSet.size() != total) {
				List<BhsRecommandItem> list = new ArrayList<BhsRecommandItem>(detailSet);
				Collections.sort(list, new Comparator<BhsRecommandItem>() {
					public int compare(BhsRecommandItem ent1, BhsRecommandItem ent2) {
						return (ent1.getDataOrder().compareTo(ent2.getDataOrder()));
					}
				});
				int order = 1;
				for (BhsRecommandItem detail : list) {
					detail.setDataOrder(order);
					order++;
				}
				detailSet = new LinkedHashSet<BhsRecommandItem>(list);
				sessionSet(DETAIL_SET, detailSet);

				MO newBean = (MO) cloudDao.get(sf(), getPersistentClass(), parentSysid);
				PropertyUtils.setProperty(newBean, DETAIL_SET, detailSet);
				List<Object> saveDetailList = new ArrayList<Object>();
				saveDetailList.add(newBean);
				msg = cloudDao.save(sf(), saveDetailList.toArray(), false, null);
				if (!SUCCESS.equals(msg)) {
					resultString = msg;
					return JSON_RESULT;
				} else {
					List<Object> deleteDetailList = new ArrayList<Object>();
					deleteDetailList.add(new DeleteStatement(BhsRecommandItem.class.getSimpleName(), new QueryGroup(
							new QueryRule(FK, NU, ""))));
					msg = cloudDao.save(sf(), deleteDetailList.toArray(), false, null);
					if (!SUCCESS.equals(msg)) {
						resultString = msg;
						return JSON_RESULT;
					} else {
						msg = "reloadGrid";
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			resultString = "尾檔排序發生錯誤";
			return JSON_RESULT;
		}
		resultString = msg;
		return JSON_RESULT;
	}

	// 尾檔新增or更新
	public String ajaxDetailSave() {
		String msg = SUCCESS;
		try {
			String sysid = request.getParameter("sysid");
			String newIds = request.getParameter("dataOrder");
			String parentSysid = request.getParameter("parentSysid");
			String sourceSysid = request.getParameter("sourceSysid");
			String remark = request.getParameter("remark");
			if (sysid == null || StringUtils.isBlank(newIds) || StringUtils.isBlank(parentSysid)) {
				resultString = "尾檔排序參數錯誤";
				return JSON_RESULT;
			}
			int newOrder = Integer.parseInt(newIds);

			Boolean isNew = true;
			BhsRecommandItem detailBean;
			if (StringUtils.isNotBlank(sysid)) {
				detailBean = (BhsRecommandItem) cloudDao.get(sf(), BhsRecommandItem.class, sysid);
				isNew = false;
			} else {
				detailBean = new BhsRecommandItem();
				Util.defaultPK(detailBean);
				detailBean.setParentSysid(parentSysid);
				detailBean.setDataOrder(newOrder);
				detailBean.setSourceSysid(sourceSysid);
				detailBean.setRemark(remark);
			}

			int total = cloudDao.queryCount(sf(), BhsRecommandItem.class,
					new QueryGroup(new QueryRule(FK, parentSysid)));
			if (isNew) {
				if (newOrder < (total + 1)) {
					// upper
					msg = shiftDetailOrder(parentSysid, newOrder, total, 1);
				} else if (newOrder > (total + 1)) {
					detailBean.setDataOrder(total + 1);
				}
			} else {
				int oldOrder = detailBean.getDataOrder();
				detailBean.setDataOrder(newOrder);
				if (newOrder < oldOrder) {
					// upper
					msg = shiftDetailOrder(parentSysid, newOrder, oldOrder - 1, 1);
				} else if (newOrder > oldOrder) {
					// downer
					msg = shiftDetailOrder(parentSysid, oldOrder + 1, newOrder, -1);
					if (newOrder > total) {
						detailBean.setDataOrder(total);
					}
				}
			}

			defaultValue(detailBean);
			List<Object> saveDetailList = new ArrayList<Object>();
			saveDetailList.add(detailBean);
			msg = cloudDao.save(sf(), saveDetailList.toArray(), false, null);
			if (!SUCCESS.equals(msg)) {
				resultString = msg;
				return JSON_RESULT;
			}

			MO newBean = (MO) cloudDao.get(sf(), getPersistentClass(), parentSysid);
			sessionSet(DETAIL_SET, PropertyUtils.getProperty(newBean, DETAIL_SET));
		} catch (Exception e) {
			e.printStackTrace();
			resultString = "尾檔排序發生錯誤";
			return JSON_RESULT;
		}
		resultString = msg;
		return JSON_RESULT;
	}

	// 尾檔拖拉排序
	public String ajaxDetailSoab() {
		String msg = SUCCESS;
		try {
			String sysid = request.getParameter("sysid");
			String newIds = request.getParameter("newIds");
			String parentSysid = request.getParameter("parentSysid");
			if (StringUtils.isBlank(sysid) || StringUtils.isBlank(newIds) || StringUtils.isBlank(parentSysid)) {
				resultString = "尾檔排序參數錯誤";
				return JSON_RESULT;
			}
			int newOrder = Integer.parseInt(newIds);

			BhsRecommandItem deatilbean = (BhsRecommandItem) cloudDao.get(sf(), BhsRecommandItem.class, sysid);
			int oldOrder = (int) PropertyUtils.getProperty(deatilbean, DATA_ORDER);
			if (newOrder < oldOrder) {
				// upper
				msg = shiftDetailOrder(parentSysid, newOrder, oldOrder - 1, 1);
			} else if (newOrder > oldOrder) {
				// downer
				msg = shiftDetailOrder(parentSysid, oldOrder + 1, newOrder, -1);
			}
			if (!SUCCESS.equals(msg)) {
				resultString = msg;
				return JSON_RESULT;
			}

			PropertyUtils.setProperty(deatilbean, DATA_ORDER, newOrder);
			defaultValue(deatilbean);
			List<Object> saveDetailList = new ArrayList<Object>();
			saveDetailList.add(deatilbean);
			msg = cloudDao.save(sf(), saveDetailList.toArray(), false, "UPDATE");
			if (!SUCCESS.equals(msg)) {
				resultString = msg;
				return JSON_RESULT;
			}

			MO newBean = (MO) cloudDao.get(sf(), getPersistentClass(), parentSysid);
			sessionSet(DETAIL_SET, PropertyUtils.getProperty(newBean, DETAIL_SET));
		} catch (Exception e) {
			e.printStackTrace();
			resultString = "尾檔排序發生錯誤";
			return JSON_RESULT;
		}
		resultString = msg;
		return JSON_RESULT;
	}

	protected String shiftDetailOrder(String parentSysid, int startIdx, int endIdx, int shiftNum) {
		try {
			// HQL
			Session session = sf().openSession();
			Transaction tx = session.beginTransaction();
			String tableName = BhsRecommandItem.class.getSimpleName();
			String columnName = "dataOrder";
			String qStr = "UPDATE " + tableName + " ";
			qStr += "SET " + columnName + " = " + columnName + " ";
			if (shiftNum >= 0)
				qStr += "+ ";
			qStr += shiftNum + " ";
			qStr += "WHERE " + columnName + " >= " + startIdx + " ";
			qStr += "AND " + columnName + " <= " + endIdx + " ";
			qStr += "AND " + FK + " = '" + parentSysid + "' ";
			Query query = session.createQuery(qStr);
			query.executeUpdate();
			tx.commit();
			session.close();
		} catch (Exception e) {
			e.printStackTrace();
			return "排序發生錯誤";
		}
		return SUCCESS;
	}
}