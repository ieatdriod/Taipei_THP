package tw.com.mitac.thp.action;

// Generated Mon Apr 25 14:31:10 CST 2016 by GenCode.java

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;

import tw.com.mitac.hibernate.QueryGroup;
import tw.com.mitac.hibernate.QueryOrder;
import tw.com.mitac.hibernate.QueryRule;
import tw.com.mitac.thp.bean.CpsEntity;
import tw.com.mitac.thp.bean.CpsMember;
import tw.com.mitac.thp.bean.CpsSmsHistory;
import tw.com.mitac.thp.bean.CpsSmsSend;
import tw.com.mitac.thp.bean.CpsSmsSendDetail;
import tw.com.mitac.thp.bean.CpsSmsTemplate;
import tw.com.mitac.thp.bean.CpsVendor;
import tw.com.mitac.thp.bean.HpsVendorMember;
import tw.com.mitac.thp.util.Util;

/**
 * CpsSmsSendAction generated by GenCode.java
 */
public class CpsSmsSendAction extends DetailAction<CpsSmsSend> {

	@Override
	protected QueryGroup getQueryRestrict() {
		if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			return new QueryGroup(new QueryRule("smsTenplateSysid", IN, smstIn("entitySysid")));
		} else if (CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {
			return new QueryGroup(new QueryRule("smsTenplateSysid", IN, smstIn("vendorSysid")));
		} else {
			return new QueryGroup(new QueryRule(PK, "x"));
		}
	}

	protected String smstIn(String colName) {
		List<String> smst = (List<String>) cloudDao.findProperty(sf(), CpsSmsTemplate.class, new QueryGroup(
				new QueryRule(colName, getUserAccount().getSourceSysid())), new QueryOrder[0], false, "sysid");
		String result = "x";
		for (String s : smst)
			result += "," + s;
		return result;
	}

	protected String memberIn;

	public String getMemberIn() {
		String result = (String) sessionGet("memberIN");
		if (result == null) {
			if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())) {
				result = "";
			} else {
				List<String> vm = (List<String>) cloudDao.findProperty(sf(), HpsVendorMember.class, new QueryGroup(
						new QueryRule("vendorSysid", getUserAccount().getSourceSysid())), new QueryOrder[0], false,
						"memberSysid");
				result = "x";
				for (String s : vm)
					result += "," + s;
			}
			sessionSet("memberIN", result);
		}
		return result;
	}

	@Override
	public String main() {
		// if(CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType())){
		// addActionMessage("管理者可以查詢所有項目");
		// }
		return super.main();
	}

	@Override
	public LinkedHashMap<String, DetailInfo> getDetailInfoMap() {
		LinkedHashMap<String, DetailInfo> detailClassMap = super.getDetailInfoMap();
		detailClassMap.put("", new DetailInfo("", DETAIL_SET, "detail", CpsSmsSendDetail.class));
		return detailClassMap;
	}

	@Override
	public String edit() {
		String result = super.edit();
		// 預設值
		if (StringUtils.isBlank(bean.getCreator())) {
			bean.setSmsDateTime(null);
		}
		return result;
	}

	@Override
	protected boolean executeSave() {
		Set<CpsSmsSendDetail> detailSet = (Set<CpsSmsSendDetail>) sessionGet(DETAIL_SET);
		Set<CpsSmsSendDetail> dSet = new LinkedHashSet<CpsSmsSendDetail>();
		Set<String> memberSet = new HashSet<String>();
		for (CpsSmsSendDetail d : detailSet) {
			if (!memberSet.contains(d.getMemberSysid())) {
				dSet.add(d);
			}
		}
		if (detailSet.size() != dSet.size()) {
			addActionMessage("自動清除" + (detailSet.size() - dSet.size()) + "筆重複項目");
			sessionSet(DETAIL_SET, dSet);
		}
		return super.executeSave();
	}

	// 加入所有所屬member
	public String addAll() {
		try {
			List<Map> mMap = new ArrayList<Map>();
			if (CpsEntity.class.getSimpleName().equals(getUserAccount().getSourceType()))
				mMap = (List<Map>) cloudDao.findProperty(sf(), CpsMember.class, new QueryGroup(new QueryRule(
						"isEnabled", true)), new QueryOrder[0], false, PK, "mobilePhone");
			if (CpsVendor.class.getSimpleName().equals(getUserAccount().getSourceType())) {
				mMap = (List<Map>) cloudDao.findProperty(sf(), CpsMember.class, new QueryGroup(new QueryRule(
						"isEnabled", true), new QueryRule(PK, IN, getMemberIn())), new QueryOrder[0], false, PK,
						"mobilePhone");
			}
			Set<CpsSmsSendDetail> dSet = new LinkedHashSet<CpsSmsSendDetail>();
			for (Map m : mMap) {
				String num = (String) m.get("mobilePhone");
				if (StringUtils.isNotBlank(num)) {
					CpsSmsSendDetail d = new CpsSmsSendDetail();
					Util.defaultPK(d);
					defaultValue(d);
					d.setParentSysid(bean.getSysid());
					d.setMemberSysid((String) m.get(PK));
					d.setSmsTel(num);
					dSet.add(d);
				}
			}
			sessionSet(DETAIL_SET, dSet);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return EDIT;
	}

	// 寄送sms
	public String sendSms() {
		try {
			Set<?> detailSet = (Set<?>) sessionGet(DETAIL_SET);
			if (detailSet.size() == 0) {
				addActionError("無可發送對象成員");
				return EDIT_ERROR;
			}

			// 先存檔,避免user更改後未存檔直接按發送
			if (EDIT_ERROR.equals(save())) {
				addActionError("儲存時發生錯誤");
				return EDIT_ERROR;
			}

			String result = SUCCESS;
			// 依照模版填入資料 -> 先不做
			CpsSmsTemplate smst = cloudDao.get(sf(), CpsSmsTemplate.class, bean.getSmsTenplateSysid());
			// Map<String, String> smsMessageMap = new LinkedHashMap<String,
			// String>();
			// for (CpsSmsSendDetail detail : bean.getDetailSet()) {
			// CpsMember member =
			// createDataTable(CpsMember.class).get(detail.getMemberSysid());
			// String smsMsg = smst.getSmsMessage();
			// // smsMsg.replace("$UUID$", xxx.uuid);
			// // ...
			// if (!SUCCESS.equals(checkLength(smsMsg))) {
			// addActionError("會員:" + member.getUuid() + "填入樣版資料後超過一封簡訊長度\n" +
			// smsMsg);
			// return EDIT_ERROR;
			// }
			// smsMessageMap.put(detail.getSysid(), smsMsg);
			// }
			// if (!SUCCESS.equals(result)) {
			// addActionError("填入樣版資料發生錯誤");
			// return EDIT_ERROR;
			// }

			// TODO 發送簡訊（等介接）
			// ...
			if (!SUCCESS.equals(result)) {
				addActionError("發送簡訊時發生錯誤");
				return EDIT_ERROR;
			}

			// 每一筆尾檔都寫入記錄
			for (CpsSmsSendDetail detail : bean.getDetailSet()) {
				CpsSmsHistory smsHistory = new CpsSmsHistory();
				Util.defaultPK(smsHistory);
				defaultValue(smsHistory);
				smsHistory.setEntitySysid(smst.getEntitySysid());
				smsHistory.setVendorSysid(smst.getVendorSysid());
				smsHistory.setSmsTel(detail.getSmsTel());
				smsHistory.setSmsMessage(smst.getSmsMessage());
				smsHistory.setSmsDateTime(systemDatetime);
				saveList.add(smsHistory);
			}

			// 押上發送時間
			bean.setSmsDateTime(systemDatetime);
		} catch (Exception e) {
			e.printStackTrace();
			addActionError("發生例外狀況");
			return EDIT_ERROR;
		}
		clearMessages();
		return super.save();
	}

	// 檢查簡訊長度
	protected String checkLength(String msg) {
		int l = msg.length(); // 字數
		int l2 = msg.getBytes().length; // 長度
		int maxLength = 160;
		if (l != l2)
			maxLength = 70;
		if (l > maxLength)
			return ERROR;
		return SUCCESS;
	}

}